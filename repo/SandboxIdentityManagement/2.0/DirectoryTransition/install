#!/bin/sh
#
# $Header$
#
# Program.....: sh
#
# Requirements:
#     The database and the listener are up and running.
#
# Purpose.....:
#     This script creates all object required to use Oracle Identity
#     Manager inside of a Oracle Unified Directory database workflow
#     element.
#
#     This option is mandatory if the database is used as an
#     identity store for participants exposed by Oracle Unified Directory.
#
#     This script configures Oracle Unified Directory to be able to expose
#     Federation Participants.
#
# -----------------------------------------------------------------------
# IMPORTANT
# Please note that script are NOT supported by Oracle Support and are
# available for reference only. You may need to modify the script
# according to your system and startup requirements. Oracle will not
# support the use of these, and you may be required to abandon the use of
# these scripts, if a problem arises.
# -----------------------------------------------------------------------
#
# Author......: Dieter Steding, Oracle Consulting Berlin
#
# Revision   Date        Editor      Comment
# ----------+-----------+-----------+------------------------------------
# 1.0.0.3    2019-06-15  DSteding    First release version
#

#
# Set environment variables for Oracle Directory Domain
#
. ~/bin/ods.env

#
# set the file permission to avoid any other user can spy on the files
# created but only if them becomes root
#
umask 077

#################### FUNCTIONS start ####################################
# -----------------------------------------------------------------------
# message() function
# -----------------------------------------------------------------------
# short-hand function to printout a console message.
# -----------------------------------------------------------------------
message() {
  echo
  echo -e "$*"
}

# -----------------------------------------------------------------------
# fed_update() function
# -----------------------------------------------------------------------
# short-hand function to export the deployment source tree.
# -----------------------------------------------------------------------
fed_update() {
  message "Exporting the deployment source tree to \e[35m${SOURCE}\e[0m ..."
  svn export --force "${FED_SRC_URL}/fed" ./deployment/fed 2>&1 | tee -a ${LOG_ANT}/fed-update-svn.log
}

# -----------------------------------------------------------------------
# available() function
# -----------------------------------------------------------------------
# short-hand function to control the existance of a deployment file
# printout the error messages if the desired file does not exists
# and terminates.
#
# param $1: the directory where to lookup
# param $2: the file to lookup
# -----------------------------------------------------------------------
available() {
  if [ ! -f "${1}/${2}" ]
  then
    message "Could not locate required file \e[31m${2}\e[0m in \e[35m${1}\e[0m."
    echo -e "Verify that you are in the deployment directory when running this script and configured the deployment properly."
    echo -e "\e[31mAborting\e[0m"
    echo -e "\nPlease follow the instructions in \e[35mdoc/IM.IAM Installation Instructions.html\e[0m."
    exit 4
  fi
}

# -----------------------------------------------------------------------
# availableAnt() function
# -----------------------------------------------------------------------
# short-hand function to control the existance of a ANT deployment file
# printout the error messages if the desired file does not exists
# and terminates.
#
# param $1: the file to lookup
# -----------------------------------------------------------------------
availableAnt() {
  available ${SRC_ANT} ${1}
}

# -----------------------------------------------------------------------
# availableEnv() function
# -----------------------------------------------------------------------
# short-hand function to control the existance of a ANT environment file
# printout the error messages if the desired file does not exists
# and terminates.
#
# param $1: the file to lookup
# -----------------------------------------------------------------------
availableEnv() {
  available ${SRC_ENV} ${1}
}

# -----------------------------------------------------------------------
# availableJps() function
# -----------------------------------------------------------------------
# short-hand function to control the existance of a OPSS configuration
# file printout the error messages if the desired file does not exists
# and terminates.
#
# param $1: the file to lookup
# -----------------------------------------------------------------------
availableJps() {
  available jps/directory ${1}
}

# -----------------------------------------------------------------------
# availableCfg() function
# -----------------------------------------------------------------------
# short-hand function to control the existance of a property configuration
# file printout the error messages if the desired file does not exists
# and terminates.
#
# param $1: the file to lookup
# -----------------------------------------------------------------------
availableCfg() {
  available ${SRC_CFG} ${1}
}

# -----------------------------------------------------------------------
# verifyCtl() function
# -----------------------------------------------------------------------
# short-hand function to verify the deployment configuration.
#
# this shell script is verifiying the environment variable CONTROL
# We do it at the shell level to prevent that the Java/Ant stack to be used
# for and will consume resource to check if the overall process will fail
# -----------------------------------------------------------------------
verifyAnt() {
  availableAnt fed-setup-ant.xml
  availableAnt fed-config-ant.xml
}

# -----------------------------------------------------------------------
# verifyEnv() function
# -----------------------------------------------------------------------
# short-hand function to verify the deployment configuration.
#
# this shell script is verifiying the environment variable CONFIG
# We do it at the shell level to prevent that the Java/Ant stack to be used
# for and will consume resource to check if the overall process will fail
# -----------------------------------------------------------------------
verifyEnv() {
  availableEnv scp-server.xml
  availableEnv jee-server.xml
  availableEnv fed-server.xml
}

# -----------------------------------------------------------------------
# verifyJps() function
# -----------------------------------------------------------------------
# short-hand function to verify the deployment configuration.
#
# We do it at the shell level to prevent that the Java/Ant stack to be used
# for and will consume resource to check if the overall process will fail
# -----------------------------------------------------------------------
verifyJps() {
  availableJps cwallet.sso
  availableJps ewallet.p12
}

# -----------------------------------------------------------------------
# verifyCfg() function
# -----------------------------------------------------------------------
# short-hand function to verify the deployment configuration.
#
# We do it at the shell level to prevent that the Java/Ant stack to be used
# for and will consume resource to check if the overall process will fail
# -----------------------------------------------------------------------
verifyCfg() {
  availableCfg ${FED_PREFIX}.properties
}

# -----------------------------------------------------------------------
# verify() function
# -----------------------------------------------------------------------
# short-hand function to verify all xml files' syntax recursively.
# -----------------------------------------------------------------------
verify(){
  message "Verifying XML syntax exported in \e[35m`pwd`\e[0m ..."
  find  ./ -name "*.xml" -exec xmllint --noout '{}' \; 2>&1 | tee  ${LOG_ANT}/fed-verify-err.log
  echo -e "XML syntax exported in \e[35m`pwd`\e[0m verified."
}

# -----------------------------------------------------------------------
# cleanup() function
# -----------------------------------------------------------------------
# short-hand function to cleanup the entire directory structure.
# -----------------------------------------------------------------------
cleanup() {
  rm -rf ${LOG_ANT}
  rm -rf ${SRC_ENV}
  rm -rf ${SRC_ANT}/${FED_PREFIX}
  rm -rf ${SRC_CFG}/${FED_PREFIX}.properties
}

# -----------------------------------------------------------------------
# stdinToExitCode() function
# -----------------------------------------------------------------------
# short-hand function to fetch and return an exit code from the standard
# input.
# -----------------------------------------------------------------------
stdinToExitCode() {
  read exit_code
  return $exit_code
}

# -----------------------------------------------------------------------
# executeAndLog() function
# -----------------------------------------------------------------------
# short-hand function to execute any command whilst logging to the stdout
# and a specified file while preserving the actual exit code of the given
# command
#
# this is strongly required to pass down the exit code because a simple
# pipe to tee will swallow it
#
# param $1: log file to record to
# param $@: command to execute (with all the parameters)
#
# returns the exit code of the command
# -----------------------------------------------------------------------
executeAndLog() {
  : ${1:?"wrong usage of function executeAndLog(): no parameter passed! Revise the code!"}
  : ${2:?"wrong usage of function executeAndLog(): missing second parameter! Revise the code!"}

  logFile="${1}"
  shift
  command=${@}

  # do the magic...
  (
    (
      (
        (
          # executing the command, while redirecting stderr, so it gets picked up by the log as well
          ${command} 2>&1;
          # writing the error code to 3
          echo $? >&3
        # piping to logFile and 4
        ) | tee -a "${logFile}" >&4
      # 3 goes into stdin so we can pipe it somewhere
      ) 3>&1
    # piping stdin (actually 3) for capture
    ) | stdinToExitCode
  # 4 goes into stdin so we see it on the console
  ) 4>&1

  exit_code=$?
  wait

  3>&-
  4>&-

  return $exit_code
}
#################### FUNCTIONS end ######################################

#
# validate the required environment for Java Runtime definition
#
if [ -z "${JAVA_HOME}" ]
then
  message "You must specify a JAVA_HOME environment configuration to used for this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 1
fi

#
# validate the required environment for Java Vendor definition
#
if [ -z "${JAVA_VENDOR}" ]
then
  message "You must specify a JAVA_VENDOR environment configuration to used for this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 1
fi

#
# validate the required environment for Fusion Middleware software installation
#
if [ -z "${FMW_HOME}" ]
then
  message "You must specify a FMW_HOME environment configuration to used for this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 2
fi

#
# validate the required environment for Apache ANT software installation
#
if [ -z "${ANT_HOME}" ]
then
  message "You must specify a ANT_HOME environment configuration to used for this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 2
fi

#
# validate the required environment for Oracle WebLogic Server software installation
#
if [ -z "${WLS_HOME}" ]
then
  message "You must specify a WLS_HOME environment configuration to used for this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 2
fi

#
# validate the required environment for Oracle Identity and Access Management software installation
#
if [ -z "${IAM_HOME}" ]
then
  message "You must specify a IAM_HOME environment configuration to used for this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 2
fi

#
# validate the required environment for Oracle Unified Directory software installation
#
if [ -z "${OUD_HOME}" ]
then
  message "You must specify a OUD_HOME environment configuration to used for this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 2
fi

#
# validate the required environment for deploying the configuration targets
#
if [ -z "${FED_PREFIX}" ]
then
  message "You must specify a FED_PREFIX configuration used by this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 2
fi

#
# validate the required environment for exporting the source tree
#
if [ "${FED_SRC_URL}"x == x ]; then
  message "You must specify a FED_SRC_URL configuration used by this deployment."
  echo -e "\e[31mAborting\e[0m"
  exit 3
fi

#
# Declare the directory the source tree will be exported to
#
SOURCE=`pwd`/deployment

#
# Declare the directory the deplyoment configuration will be located
#
SRC_ANT=`pwd`/src/ant

#
# Declare the directory the environment configuration will be located
#
SRC_ENV=`pwd`/.env/${FED_PREFIX}

#
# Declare the directory the property configuration will be located
#
SRC_CFG=`pwd`/src/cfg

#
# the recording will be done in a separate directory to keep it over several executions
# ANT will also relay on this definition which is passed as a system property
#
LOG_ANT=`pwd`/log/${FED_PREFIX}

# ensure that OLDANT is non-null
if [ ${ANT_HOME:-0} = 0 ]; then
  OLDANT=$PATH
else
  OLDANT=${ANT_HOME}
fi

# ensure that OLDJAVA is non-null
if [ ${JAVA_HOME:-0} = 0 ]; then
  OLDJAVA=$PATH
else
  OLDJAVA=${JAVA_HOME}
fi

case "$PATH" in
  *${JAVA_HOME}/bin*)
  ;;
  *${OLDJAVA}/bin*) PATH=`echo $PATH | sed "s;$OLDJAVA/bin;${JAVA_HOME}/bin;g"`
  ;;
  *:)               PATH=${PATH}${JAVA_HOME}/bin:
  ;;
  "")               PATH=${JAVA_HOME}/bin
  ;;
  *)                PATH=$PATH:${JAVA_HOME}/bin
  ;;
esac

#
# Put new ANT_HOME in path and remove old one
#
case "$PATH" in
  *${ANT_HOME}/bin*)
  ;;
  *${OLDANT}/bin*)   PATH=`echo $PATH | sed "s;$OLDANT/bin;${ANT_HOME}/bin;g"`
  ;;
  *:)                PATH=${PATH}${ANT_HOME}/bin:
  ;;
  "")                PATH=${ANT_HOME}/bin
  ;;
  *)                 PATH=$PATH:${ANT_HOME}/bin
  ;;
esac

JRF_LIBRARY=${FMW_HOME}/oracle_common/modules
WLS_LIBRARY=${WLS_HOME}/server/lib
OUD_LIBRARY=${OUD_HOME}/lib
SOA_LIBRARY=${SOA_HOME}/soa/modules

JARPATH=${JRF_LIBRARY}/javax.management.j2ee.jar\
:${JRF_LIBRARY}/thirdparty/ant-contrib-1.0b3.jar\
:${JRF_LIBRARY}/thirdparty/features/jsch.jar\
:${JRF_LIBRARY}/org.apache.commons.logging_1.2.jar\
:${JRF_LIBRARY}/oracle.logging-utils.jar\
:${JRF_LIBRARY}/oracle.odl/ojdl.jar\
:${JRF_LIBRARY}/oracle.dms/dms.jar\
:${JRF_LIBRARY}/oracle.ucp.jar\
:${JRF_LIBRARY}/oracle.javatools/resourcebundle.jar\
:${JRF_LIBRARY}/oracle.javatools/javatools-nodeps.jar\
:${JRF_LIBRARY}/oracle.javatools/javatools-annotations.jar\
:${JRF_LIBRARY}/oracle.adf.share.ca/adf-share-base.jar\
:${JRF_LIBRARY}/oracle.adf.share.ca/adf-share-ca.jar\
:${JRF_LIBRARY}/oracle.adf.share/adflogginghandler.jar\
:${JRF_LIBRARY}/oracle.adf.share/adf-share-support.jar\
:${JRF_LIBRARY}/oracle.adf.model/adfm.jar\
:${JRF_LIBRARY}/oracle.adf.businesseditor/adf-businesseditor-model.jar\
:${JRF_LIBRARY}/oracle.xdk/xml.jar\
:${JRF_LIBRARY}/oracle.xdk/xmlparserv2.jar\
:${JRF_LIBRARY}/oracle.xmlef/xmlef.jar\
:${JRF_LIBRARY}/oracle.bali.share/share.jar\
:${JRF_LIBRARY}/oracle.mds/mdsrt.jar\
:${JRF_LIBRARY}/oracle.mds/oramds.jar\
:${JRF_LIBRARY}/oracle.jdbc/ojdbc8.jar\
:${JRF_LIBRARY}/oracle.nlsrtl/orai18n-mapping.jar\
:${JRF_LIBRARY}/com.oracle.http_client.http_client.jar\
:${JRF_LIBRARY}/oracle.osdt/osdt_wss.jar\
:${JRF_LIBRARY}/oracle.osdt/osdt_xmlsec.jar\
:${JRF_LIBRARY}/clients/com.oracle.webservices.fmw.client.jar\
:${JRF_LIBRARY}/clients/com.oracle.webservices.fmw.ws-config-mbeans-impl.jar\
:${JRF_LIBRARY}/oracle.webservices/orawsdl.jar\
:${JRF_LIBRARY}/oracle.webservices/ws_confmbeans.jar\
:${JRF_LIBRARY}/oracle.wsm.common/wsm-secpol.jar\
:${JRF_LIBRARY}/oracle.wsm.common/wsm-policy-core.jar\
:${JRF_LIBRARY}/oracle.wsm.agent.common/wsm-agent-core.jar\
:${JRF_LIBRARY}/oracle.jps/jps-mbeans.jar\
:${SOA_LIBRARY}/commons-cli-1.1.jar\
:${SOA_LIBRARY}/oracle.soa.fabric_11.1.1/fabric-runtime.jar\
:${SOA_LIBRARY}/oracle.soa.fabric_11.1.1/soa-infra-tools.jar\
:${SOA_LIBRARY}/oracle.soa.fabric_11.1.1/oracle-soa-client-api.jar\
:${SOA_LIBRARY}/oracle.soa.mgmt_11.1.1/soa-infra-mgmt.jar\
:${SOA_LIBRARY}/oracle.soa.workflow_11.1.1/bpm-services.jar\
:${WLS_LIBRARY}/wlthint3client.jar\
:${WLS_HOME}/modules/com.oracle.weblogic.package.jar\
:${WLS_HOME}/modules/com.oracle.weblogic.ant.taskdefs.jar\
:${JRF_LIBRARY}/oracle.jrf/jrf-api.jar\
:${OUD_LIBRARY}/opends-sdk-0.9.jar\
:${OUD_LIBRARY}/oud.jar

export PATH
export CLASSPATH=${JARPATH}:`pwd`/lib/hst-foundation.jar:`pwd`/lib/hst-deployment.jar:`pwd`/lib/ods-deployment.jar
export ANT=${ANT_HOME}/bin/ant

#
# Setup the working directories required at runtime
#
if [ ! -d ${SOURCE} ]
then
  mkdir -p ${SOURCE}
fi
if [ ! -d ${CONFIG} ]
then
  mkdir -p ${CONFIG}
fi
if [ ! -d ${SRC_ENV} ]
then
  mkdir -p ${SRC_ENV}
  chmod 700 ${SRC_ENV}
fi
if [ ! -d ${LOG_ANT} ]
then
  mkdir -p ${LOG_ANT}
  chmod 700 ${LOG_ANT}
fi

case "$1" in
  clean)   shift
           cleanup
  ;;
  config)  shift
           verifyEnv
           verifyAnt
           if [ -z ${1} ]
           then
             message "You must specify at least one deployment target."
             echo -e "\e[31mAborting\e[0m"
             exit 2
           fi
           executeAndLog ${LOG_ANT}/fed-config-${1}-ant.log ${ANT} -Dlog.env=${LOG_ANT} -Dfmw.env=${FED_PREFIX} -f ${SRC_ANT}/fed-config-ant.xml $*
           ANT_EXIT_CODE=$?
  ;;
  replace) shift
           verifyJps
           verifyCfg
           message "Configure deployment for \e[35m${FED_PREFIX}\e[0m with source tree \e[35m${SOURCE}\e[0m ..."
           executeAndLog ${LOG_ANT}/ods-replace-all.log ${ANT} -Dlog.env=${LOG_ANT} -Dfmw.env=${FED_PREFIX} -f ./tpl/ods-replace.xml all
           verify
  ;;
  setup)   shift
           verifyEnv
           verifyAnt
           if [ -z ${1} ]
           then
             message "You must specify at least one setup target."
             echo -e "\e[31mAborting\e[0m"
             exit 4
           fi
           executeAndLog ${LOG_ANT}/fed-setup-${1}-ant.log ${ANT} -Dlog.env=${LOG_ANT} -Dfmw.env=${FED_PREFIX} -f ${SRC_ANT}/fed-setup-ant.xml $*
           ANT_EXIT_CODE=$?
  ;;
  update)  shift
           fed_update
           verify
  ;;
  verify)  shift
           verify
  ;;
  *)       message "usage: $0 (clean | config | replace | setup | update | verify)"
esac

exit $ANT_EXIT_CODE
