/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2010. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Manager Plugin Shared Library
    Subsystem   :   Common Shared Plugin

    File        :   CredentialAction.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   Dieter.Steding@oracle.com

    Purpose     :   This file implements the class
                    CredentialAction.


    Revisions    Date        Editor      Comment
    ------------+-----------+-----------+-----------------------------------
    1.0.0.0      2010-10-01  DSteding    First release version
*/

package oracle.iam.identity.event.spi;

import oracle.iam.platform.kernel.vo.EventResult;
import oracle.iam.platform.kernel.vo.Orchestration;
import oracle.iam.platform.kernel.vo.BulkEventResult;
import oracle.iam.platform.kernel.vo.BulkOrchestration;

import oracle.iam.platform.utils.crypto.CryptoUtil;
import oracle.iam.platform.utils.crypto.CryptoException;

import oracle.iam.platform.context.ContextAwareString;

import oracle.iam.identity.usermgmt.api.UserManagerConstants;

import oracle.hst.foundation.SystemMessage;

import oracle.hst.security.SaltedSHA1Digester;

import oracle.iam.identity.foundation.event.AbstractPreProcessHandler;

////////////////////////////////////////////////////////////////////////////////
// class CredentialAction
// ~~~~~ ~~~~~~~~~~~~~~~~
/**
 ** The <code>CredentialAction</code> act as the service end point for Identity
 ** Manager to intercept a password change and compute a hash value based on the
 ** changed password.
 ** <br>
 ** The interception is done in the action phase of an orchestration only due to
 ** the following reasons:
 ** <ol>
 **  <li>Any user is allowed to access Identity Manager only with valid
 **      credentials.
 **  <li>During Identity Reconciliation a password is generated by the system
 **      without sending it to any user.
 **  <li>Granting access for a user to any console of Identity Manager requires
 **      to reset the password of an identity first.
 **  <li>The new password is send to the user only.
 **  <li>End-User are now able to reset their own password leveraging self
 **      service capabilities
 ** </ol>
 ** <p>
 ** The indented use of the computed hash value is to allow an external
 ** authentication service to validate provided user credentials without the
 ** requirement to deploy the Crypto API of Identity Manager on that service but
 ** still be able to validate credentials in a secure manner.
 ** <p>
 ** This approach has the advantage that the external authentication service
 ** does not need to include the heavy wight API's of Oracle Identity Manager on
 ** the service side.
 **
 ** @author  Dieter.Steding@oracle.com
 ** @version 3.1.0.0
 ** @since   1.0.0.0
 */
public class CredentialAction extends AbstractPreProcessHandler {

  //////////////////////////////////////////////////////////////////////////////
  // static final attributes
  //////////////////////////////////////////////////////////////////////////////

  /* TODO: needs to made configurable */
  private static final String PASSWORD_EXTERNAL = "password";
  /* TODO: needs to made configurable */
  private static final String KEYSTORE_ALIAS    = "DBSecretKey";

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>CredentialAction</code> event handler that allows use
   ** as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public CredentialAction() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   execute (PreProcessHandler)
  /**
   ** The implementation of this pre process event handler in one-off
   ** orchestration.
   **
   ** @param  processId          the identifier of the orchestration process.
   ** @param  eventID            the identifier of the orchestration event
   ** @param  orchestration      the object containing contextual information
   **                            such as orchestration parameters, operation.
   **
   ** @return                    a {@link EventResult} indicating the
   **                            operation has proceed.
   **                            If the event handler is defined to execute in a
   **                            synchronous mode, it must return a result.
   **                            If it is defined execute in asynchronous mode,
   **                            it must return <code>null</code>.
   */
  @Override
  public EventResult execute(final long processId, final long eventID, final Orchestration orchestration) {
    final String method = "execute";
    trace(method, SystemMessage.METHOD_ENTRY);
    final EventResult result = new EventResult();
    final UserManagerConstants.Operations operation = UserManagerConstants.Operations.valueOf(orchestration.getOperation());
    switch (operation) {
      // perform all actions that are necessary for create new identity
      case CREATE          :
      // perform all actions that are necessary for password changes of an
      // existing identity
      case CHANGE_PASSWORD :
      case RESET_PASSWORD  : if (orchestration.getParameters().containsKey(UserManagerConstants.AttributeName.PASSWORD.getId())) {
		                           final Object value = orchestration.getParameters().get(UserManagerConstants.AttributeName.PASSWORD.getId());
		                           String ontransit = null;
		                           if (value instanceof ContextAwareString)
		                             ontransit = (String)((ContextAwareString)value).getObjectValue();
		                           else
		                             ontransit = (String)value;
                               try {
                                 final String credentail = CryptoUtil.decrypt(ontransit, KEYSTORE_ALIAS);
                                 orchestration.addParameter(PASSWORD_EXTERNAL, SaltedSHA1Digester.instance().digest(credentail));
                               }
                               catch (CryptoException e) {
                                 result.setVeto(true);
                                 result.setFailureReason(e);
                               }
                             }
      // intentionally fall through
      default              :  break;
    }
    trace(method, SystemMessage.METHOD_EXIT);
    // Event Result is a way for the event handler to notify the kernel of any
    // failures or errors and also if any subsequent actions need to be taken
    // (immediately or in a deferred fashion). It can also be used to indicate
    // if the kernel should restart this orchestration or veto it if the event
    // handler doesn't want to notify the kernel of anything it shouldn't return
    // a null value  instead an empty EventResult object
    return result;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   execute (PreProcessHandler)
  /**
   ** The implementation of this pre process event handler for bulk
   ** orchestration.
   **
   ** @param  processId          the identifier of the orchestration process.
   ** @param  eventId            the identifier of the orchestration event
   ** @param  orchestration      the object containing contextual information
   **                            such as orchestration parameters, operation.
   **
   ** @return                    a {@link BulkEventResult} indicating the
   **                            operation has proceed.
   **                            If the event handler is defined to execute in a
   **                            synchronous mode, it must return a result.
   **                            If it is defined execute in asynchronous mode,
   **                            it must return <code>null</code>.
   */
  @Override
  public BulkEventResult execute(final long processId, final long eventId, final BulkOrchestration orchestration) {
    final String method = "execute";
    trace(method, SystemMessage.METHOD_ENTRY);
    trace(method, SystemMessage.METHOD_EXIT);
    // even if you don't implement a bulk handler you generally want to return
    // the BulkEventResult class otherwise bulk orchestrations will error out
    // and orphan
    return new BulkEventResult();
  }
}