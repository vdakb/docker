<!--
  ! This software is the confidential and proprietary information of
  ! Oracle Corporation. ("Confidential Information").  You shall not
  ! disclose such Confidential Information and shall use it only in
  ! accordance with the terms of the license agreement you entered
  ! into with Oracle.
  !
  ! ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
  ! SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  ! IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
  ! PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
  ! SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
  ! THIS SOFTWARE OR ITS DERIVATIVES.
  !
  ! Copyright &#xA9; 2015. All Rights reserved
  !
-->
<chapter xmlns   ="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xml:id  ="principles-iam"
         xml:lang="en"
         version ="5.0">
  <title>Principles</title>
  <para>
    This document follows two broad IT conventions in order to create a consistent set of naming guidelines.
  </para>
  <section xml:id="principles-iam-01">
    <title>Convention over Configuration</title>
    <para>
      Convention over Configuration - also known as Coding by Convention (as defined by Wikipedia) is a software design paradigm which seeks to decrease the number of decisions that developers need to make, gaining simplicity, but not necessarily losing flexibility.
      To some readers the fact an Oracle and ADF document is trying to dictate convention over configuration might seem rather comical given ADF through its heavy use of XML files is all configuration.
      However, the leading principle of decreasing the number of decisions developers need to make is easily adaptable into this guide.
    </para>
  </section>
  <section xml:id="principles-iam-02">
    <title>No Hungarian Notation</title>
    <para>
      Hungarian notation (as defined by Wikipedia) is a code convention of adding prefixes or suffixes to objects to indicate the object types or use.
      For example for an integer counter field, it would be named iCounter.
      While it's recognized some programmers &#x26; languages have a preference for using Hungarian notation, because it is arguable not the norm in Java programming, and it can lead to inconsistent names when code is modified or ported, it will not be adopted for this document as it is counter to the stated goal "Be flexible enough to adapt to change".
      There are some scenarios where the principles conflict with each other and it is necessary to apply a precedence order to the rules.
      For example when JDeveloper creates an ADF View Object, it includes a “View” suffix in the View Object’s name.
      This violates the No Hungarian Notation principle.
      However, to change the name violates the Convention over Configuration principle.
      To resolve this conflict, the document puts precedence on Convention over Configuration before the No Hungarian Notation rule.
      This has the added benefit that when you introduce junior programmers to your ADF team who have just undertaken ADF training, or a new ADF programmer joins your team from another organization, they will be familiar with the default conventions used by JDeveloper over a unique set of guidelines that require you to modify all names.
    </para>
  </section>
</chapter>