<?xml version="1.0" encoding="US-ASCII"?>
<project name           ="#{ant.project}"
         basedir        ="#{ant.basedir}"
         xmlns:fmw      ="http://oracle.hst.deployment/fusion"
         xmlns:jps      ="http://oracle.hst.deployment/security"
         xmlns:server   ="http://oracle.hst.deployment/topology"
         xmlns:plugin   ="http://oracle.iam.identity/plugin"
         xmlns:metadata ="http://oracle.iam.identity/metadata"
         xmlns:object   ="http://oracle.iam.identity/object"
         xmlns:operation="http://oracle.iam.identity/operation"
         xmlns:job      ="http://oracle.iam.identity/job"
         xmlns:workflow ="http://oracle.iam.identity/workflow">
  <!--
  =====================================================================
  == properties globaly defined
  =====================================================================
  -->
  <import file="#{oim.context}"/>
  <!--
  =====================================================================
  Convenience for the lateral calls we make.
  Use call-subproject to descend into another directory, and this to call in the
  same build.xml.

  NOTE THE USE OF $TARGET, here and in common's call-subproject.
  This has the effect of dividing rules into subdirectory rules (using
  call-subproject and sensitive to $target) and action rules (using
  call-subproject and setting $target)... but it is bad for a subdirectory rule
  to depend on another one, as they are both sensitive to $target, but you
  probably mean that subdirB needed subdirA to be _built_, not $target'ed
  (tested, etc.)

  In other words, DO NOT USE DEPENDS=... IN A TARGET WITH call-subproject.
  =====================================================================
  -->
  <macrodef name="call-subproject">
    <attribute name="subproject"/>
    <attribute name="subtarget"/>
    <sequential>
      <subant target="@{subtarget}" buildpath="@{subproject}" antfile="adf-library-ant.xml"/>
    </sequential>
  </macrodef>
    <!--
  =====================================================================
  == ANT target to cleanup the build deliverables
  =====================================================================
  -->
  <target name="clean" description="Clean the project build deliverables">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${output.dir}" includes="**/*"/>
      <fileset dir="${deploy.dir}" includes="**/*"/>
      <fileset dir="${deploy.doc}">
        <patternset refid="document.patterns"/>
      </fileset>
    </delete>
  </target>
  <!--
  =====================================================================
  == ANT target to initialize the build process by creating all
  == necessary filesystem folders
  =====================================================================
  -->
  <target name="init">
    <tstamp/>
    <mkdir dir="${output.dir}"/>
    <mkdir dir="${output.dir}/META-INF"/>
    <mkdir dir="${deploy.dir}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to copy secific files to the output directory
  =====================================================================
  -->
  <target name="copy" description="Copy files to output directory" depends="init">
    <copy todir="${output.dir}" verbose="no">
      <fileset dir="${source.dir}">
        <patternset refid="filetype.patterns"/>
      </fileset>
    </copy>
  </target>
  <!--
  =====================================================================
  == ANT target to compile all Java Source files
  =====================================================================
  -->
  <target name="compile" description="Compile Java source files" depends="copy">
    <javac executable       ="${jdk.compiler}"
           source           ="${jdk.version}"
           target           ="${jdk.version}"
           debug            ="${javac.debug}"
           nowarn           ="${javac.nowarn}"
           destdir          ="${output.dir}"
           encoding         ="${javac.encoding}"
           deprecation      ="${javac.deprecation}"
           classpathref     ="classpath"
           includeantruntime="no">
      <src path        ="${source.dir}"/>
    </javac>
  </target>
  <!--
  =====================================================================
  == ANT target to create a manifest used in the jar files
  =====================================================================
  -->
  <target name="manifest" description="Create a manifest used in the jar files">
    <delete file="${manifest}"/>
    <!-- update to version properties -->
    <propertyfile file="adf-library-ant.version" comment="Build version info">
      <entry key="build.timest" type="date" value="now" pattern="dd/MM/yyyy hh:mm:ss aa"/>
      <entry key="build.major"  type="int"  value="00"  pattern="00" default="00"/>
      <entry key="build.minor"  type="int"  value="01"  pattern="00" default="00" operation="+" />
    </propertyfile>

    <!-- load the file -->
    <property file="adf-library-ant.version"/>

    <!-- create the manifest file -->
    <manifest file="${manifest}">
      <attribute name="Built-By"               value="${user.name}"/>
      <attribute name="Built-At"               value="${build.timest}"/>
      <attribute name="Specification-Title"    value="${description}"/>
      <attribute name="Specification-Version"  value="${application.release}"/>
      <attribute name="Specification-Vendor"   value="#{wks.specification.vendor}"/>
      <attribute name="Implementation-Title"   value="${description}"/>
      <attribute name="Implementation-Version" value="${application.release}-${build.major}.${build.minor}"/>
      <attribute name="Implementation-Vendor"  value="#{wks.implementation.vendor}"/>
    </manifest>
  </target>
  <!--
  =====================================================================
  == ANT target to package the customization library
  =====================================================================
  -->
  <target name="package-library" description="Build the ADF library" if="library" depends="compile,manifest">
    <echo message="Packaging ADF archive from path ${output.dir}/${packagepath}"/>
    <jar destfile="${deploy.dir}/${library}.jar" manifest="${manifest}">
      <fileset dir="${output.dir}" includes="${packagepath}" excludes="**/*-ant.xml **/*-dm.xml"/>
      <fileset dir="${output.dir}">
        <patternset refid="filetype.patterns"/>
      </fileset>
    </jar>
  </target>
  <!--
  =====================================================================
  == ANT target to package the customization library
  =====================================================================
  -->
  <target name="package" description="Build the ADF library" depends="package-library">
    <!-- generate javadoc -->
    <javadoc author      ="false"
             classpathref="classpath"
             sourcepath  ="${source.dir}"
             packagenames="#{wks.package}"
             destdir     ="${deploy.doc}"
             encoding    ="${javac.encoding}"
             docencoding ="${javac.encoding}"
             charset     ="${javac.encoding}"/>
    <!-- package javadoc -->
    <jar destfile="${deploy.dir}/${library}-doc.jar">
      <fileset dir="${deploy.doc}">
        <patternset refid="document.patterns"/>
      </fileset>
    </jar>
    <!-- package source -->
    <jar destfile="${deploy.dir}/${library}-src.jar">
      <fileset dir="${source.dir}" includes="**/*.*"/>
    </jar>
  </target>
</project>
