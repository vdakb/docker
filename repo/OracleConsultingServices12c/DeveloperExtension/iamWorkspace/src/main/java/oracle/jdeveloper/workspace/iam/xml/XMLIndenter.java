/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2012. All Rights reserved

    -----------------------------------------------------------------------

    System      :   JDeveloper Identity and Access Extension
    Subsystem   :   Identity and Access Management Facility

    File        :   XMLIndenter.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    XMLIndenter.


    Revisions          Date        Editor      Comment
    ------------------+-----------+-----------+-------------------------------
    12.2.1.3.42.60.74  2018-05-15  DSteding    First release version
*/

package oracle.jdeveloper.workspace.iam.xml;

///////////////////////////////////////////////////////////////////////////////
// class XMLIndenter
// ~~~~~ ~~~~~~~~~~~
/**
 ** The <code>XMLIndenter</code> is used create indent strings using the stack
 ** paradigm. This allows XML documents to be generated by pushing and popping
 ** indents into the stack. This indenter caches all indent strings created so
 ** that when the same position on the stack is encountered the indent can be
 ** acquired quickly.
 ** <p>
 ** The indents created by this are all prefixed with the line feed character,
 ** which allows XML tags to span exclusive lines. If the indent size specified
 ** is zero or less then no spaces, or line feed will be added to the generated
 ** indent string.
 **
 ** @author  dieter.steding@oracle.com
 ** @version 12.2.1.3.42.60.74
 ** @since   12.2.1.3.42.60.74
 */
class XMLIndenter {

  //////////////////////////////////////////////////////////////////////////////
  // instance attributes
  //////////////////////////////////////////////////////////////////////////////

  /** the number of spaces that is used for each of the indents. */
  private int   indent;

  /** represents the current number of spaces in the indent text. */
  private int   count;

  /** represents the index within the cache to get the indent. */
  private int   index;

  /** provides a quick string cache that caches using by index. */
  private Stack stack;

  //////////////////////////////////////////////////////////////////////////////
  // Member classes
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // class Stack
  // ~~~~~ ~~~~~
  /**
   ** The <code>Stack</code> object is used create an indexable list which
   ** allows the indenter to quickly acquire an indent using a stack position.
   ** This ensures that the indenter need only  create an index once for a given
   ** stack position. The number of indents held within this cache can also be
   ** tracked.
   */
  static class Stack {

    ////////////////////////////////////////////////////////////////////////////
    // instance attributes
    ////////////////////////////////////////////////////////////////////////////

    /** the number of indent strings held by the cache. */
    private int count;

    /** tracks indent strings within the stack. */
    private String[] list;

    ////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // Method: Ctor
    /**
     ** Constructor for the <code>Stack</code> object.
     ** <p>
     ** This creates a stack of the specified size, the specified size acts as
     ** an initial size and the cache can be expanded on demand.
     **
     ** @param  size             the initial number of entries in the cache.
     */
    public Stack(final int size) {
      // ensure inheritance
      super();

      // intialize instance attributes
      this.list = new String[size];
    }

    ////////////////////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // Method: size
    /**
     ** This method is used to retrieve the number of indents that have been
     ** added to the stack. This is used to determine if an indent request is
     ** the first.
     **
     ** @return                  the number of indents in the stack.
     */
    public int size() {
      return this.count;
    }

    ////////////////////////////////////////////////////////////////////////////
    // Method: set
    /**
     ** This method is used to add the specified indent on to the stack.
     ** <p>
     ** The index allows the cache to act as a stack, when the index is
     ** specified it can be used to retrieve the same indent using that index.
     **
     ** @param  index            the position to add the index to.
     ** @param  text             the indent to add to the position.
     */
    public void set(final int index, final String text) {
      if (index >= this.list.length) {
        resize(index * 2);
      }
      if (index > this.count) {
        this.count = index;
      }
      this.list[index] = text;
    }

    ////////////////////////////////////////////////////////////////////////////
    // Method: get
    /**
     ** This method is used to retrieve an indent from the given position.
     ** <p>
     ** This allows the indenter to used as a stack, by increasing and
     ** decreasing the index as required.
     **
     ** @param  index            the position to retrieve the indent from.
     **
     ** @return                  the indent retrieve from the given index.
     */
    public String get(final int index) {
      return (index < this.list.length) ? this.list[index] : null;
    }

    ////////////////////////////////////////////////////////////////////////////
    // Methods group by functionality
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // Method: resize
    /**
     ** Should the number of indents to be cache grows larger than the default
     ** initial size then this will increase the size of the cache. This ensures
     ** that the indenter can handle an arbitrary number of indents for a given
     ** output.
     **
     ** @param  size             the size to expand the cache to.
     */
    private void resize(final int size) {
      final String[] temp = new String[size];
      for (int i = 0; i < this.list.length; i++)
        temp[i] = this.list[i];

      this.list = temp;
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:  Ctor
  /**
   ** Constructor for the <code>XMLIndenter</code> object.
   ** <p>
   ** This will create an indent that uses three spaces for each indent that is
   ** pushed on to the stack. This also uses a default cache size of sixteen,
   ** which should be sufficient for most files.
   */
  public XMLIndenter() {
    this(new XMLFormat());
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:  Ctor
  /**
   ** Constructor for the <code>XMLIndenter</code> object.
   ** <p>
   ** This will create an indent that uses the specified number of spaces to
   ** create each entry pushed on to the stack. This uses a cache size of
   ** sixteen, which should be sufficient for most files.
   **
   ** @param  format             determines the number of spaces per indent.
   */
  public XMLIndenter(XMLFormat format) {
    this(format, 16);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:  Ctor
  /**
   ** Constructor for the <code>XMLIndenter</code> object.
   ** <p>
   ** This will create an indent that uses the specified number of spaces to
   ** create each entry pushed on to the stack. This uses a cache of the
   ** specified size, which is used to optimize the object.
   **
   ** @param  format             determines the number of spaces per indent
   ** @param  size               this is the initial size of the indent cache.
   */
  private XMLIndenter(XMLFormat format, int size) {
    // ensure inheritance
    super();

    // intialize instance attributes
    this.indent = format.indent();
    this.stack = new Stack(size);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   peek
  /**
   ** This returns the current indent for this indenter.
   ** <p>
   ** This should be used to write elements or comments that should be at the
   ** same indentation level as the XML element that will follow.
   **
   ** @return                    the current indentation level for this.
   */
  public String peek() {
    return indent(this.index);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   push
  /**
   ** This is used to push an indent on to the cache.
   ** <p>
   ** The first indent created by this is an empty string, this is because an
   ** indent is not required for the start of an XML file. If there are multiple
   ** roots written to the same writer then the start and end tags of a root
   ** element will exist on the same line.
   **
   ** @return                    the pushed indent on the stack.
   */
  public String push() {
    final String text = indent(this.index++);
    if (this.indent > 0)
      this.count += this.indent;

    return text;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   pop
  /**
   ** This is used to pop an indent from the cache.
   ** <p>
   ** This reduces the length of the current indent and is typically used when
   ** an end tag is added to an XML document. If the number of pop requests
   ** exceeds the number of push requests then an empty string is returned from
   ** this method.
   **
   ** @return                    the next indent on the stack.
   */
  public String pop() {
    final String text = indent(--this.index);
    if (this.indent > 0)
      this.count -= this.indent;
    return text;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   indent
  /**
   ** This is used to acquire the indent at the specified index.
   ** <br>
   ** If the indent does not exist at the specified index then on is created
   ** using the current value of the indent. The very first indent taken from
   ** this will be an empty string value.
   **
   ** @param  index              this is the index to acquire the indent from.
   **
   ** @return                    this returns the indent from the specified
   **                            index.
   */
  private String indent(int index) {
    if (this.indent > 0) {
      String text = this.stack.get(index);

      if (text == null) {
        text = create();
        this.stack.set(index, text);
      }
      if (this.stack.size() > 0) {
        return text;
      }
    }
    return "";
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods group by functionality
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   create
  /**
   ** This is used to create an indent which can later be pushed on to the
   ** stack. If the number of spaces to be added is zero then this will return a
   ** single character string with a line feed.
   **
   ** @return                    this will create an indent to be added to the
   **                            stack.
   */
  private String create() {
    final char[] text = new char[this.count + 1];
    if (this.count > 0) {
      text[0] = '\n';

      for (int i = 1; i <= this.count; i++)
        text[i] = ' ';

      return new String(text);
    }
    return "\n";
  }
}