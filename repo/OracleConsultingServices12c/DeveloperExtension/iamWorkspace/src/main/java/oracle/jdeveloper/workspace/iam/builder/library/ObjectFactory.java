/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2011. All Rights reserved

    --------------------------------------------------------------------------

    System      :   JDeveloper Identity and Access Extension
    Subsystem   :   Identity and Access Management Facility

    File        :   ObjectFactory.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   Dieter Steding

    Purpose     :   This file implements the class
                    ObjectFactory.


    Revisions          Date        Editor      Comment
    ------------------+-----------+-----------+-------------------------------
    11.1.1.3.37.56.13  2011-05-14  DSteding    First release version
    12.2.1.3.42.60.74  2018-05-15  DSteding    Migration to JDeveloper 12c
*/

package oracle.jdeveloper.workspace.iam.builder.library;

import javax.xml.bind.annotation.XmlRegistry;

////////////////////////////////////////////////////////////////////////////////
// class ObjectFactory
// ~~~~~ ~~~~~~~~~~~~~
/**
 ** This object contains factory methods for each Java content interface and
 ** Java element interface generated in the
 ** <code>oracle.jdeveloper.workspace.iam.builder.library</code> package.
 ** <p>
 ** An <code>ObjectFactory</code> allows you to programatically construct new
 ** instances of the Java representation for XML content. The Java
 ** representation of XML content can consist of schema derived interfaces and
 ** classes representing the binding of schema type definitions, element
 ** declarations and model groups. Factory methods for each of these are
 ** provided in this class.
 ** <p>
 ** <b>Note</b>:
 ** <br>
 ** This class is generated by the JAXB 2.0 generator provided by Oracle
 ** JDeveloper 12c (12.2.1.3). Do not change anything in the source.
 **
 ** @author  dieter.steding@oracle.com
 ** @version 12.2.1.3.42.60.74
 ** @since   11.1.1.3.37.56.13
 */
@XmlRegistry
public class ObjectFactory {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Create a new <code>ObjectFactory</code> that can be used to create new
   ** instances of schema derived classes for package:
   ** <code>oracle.jdeveloper.workspace.iam.builder.library</code>
   */
  public ObjectFactory() {
    // ensure inhertitance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods grouped by functionality
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createLibraries
  /**
   ** Create an instance of {@link Libraries}.
   **
   ** @return                    the created instance of {@link Libraries}.
   */
  public Libraries createLibraries() {
    return new Libraries();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createLibrary
  /**
   ** Create an instance of {@link Library}.
   **
   ** @return                    the created instance of {@link Library}.
   */
  public Library createLibrary() {
    return new Library();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createLibrary
  /**
   ** Create an instance of {@link Library} with the specified id and name.
   **
   ** @param  id                 the unique id of the library.
   ** @param  name               the public name of the library.
   **
   ** @return                    the created instance of {@link Library}.
   */
  public Library createLibrary(final String id, final String name) {
    return new Library(id, name);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createItem
  /**
   ** Create an instance of {@link Item} with the specified type, file and path.
   **
   ** @param  type               the {@link ItemType} of the item.
   ** @param  file               the file of the item.
   ** @param  path               the path of the item.
   ** @param  releaseAware       <code>true</code> if the item has a strong
   **                            depedency to a certain release; otherwise
   **                            <code>false</code>.
   **
   ** @return                    the created instance of {@link Item}.
   */
  public Item createItem(final ItemType type, final String file, final String path, final Boolean releaseAware) {
    return new Item(type, file, path, releaseAware);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createItem
  /**
   ** Create an instance of {@link Item}.
   **
   ** @return                    the created instance of {@link Item}.
   */
  public Item createItem() {
    return new Item();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createPath
  /**
   ** Create an instance of {@link Path}.
   **
   ** @return                    the created instance of {@link Path}.
   */
  public Path createPath() {
    return new Path();
  }
}