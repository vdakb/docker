/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Authorization Management

    File        :   ApplicationInstanceAMImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    ApplicationInstanceAMImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysauthz.module;

import java.util.Map;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import oracle.jbo.Row;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.iam.platform.authopss.vo.EntityPublication;

import oracle.iam.platform.authopss.api.PolicyConstants;

import oracle.iam.ui.platform.model.filter.Criteria;
import oracle.iam.ui.platform.model.filter.Criterion;

import oracle.iam.ui.platform.model.common.IdentityModelAdapterBean;

import oracle.iam.ui.platform.utils.SerializationUtils;

import oracle.iam.identity.sysauthz.model.view.EntitlementVOImpl;
import oracle.iam.identity.sysauthz.model.view.EntityPublicationVOImpl;
import oracle.iam.identity.sysauthz.model.view.ApplicationInstanceVOImpl;
import oracle.iam.identity.sysauthz.model.view.ApplicationInstanceVORowImpl;

import oracle.iam.identity.sysauthz.schema.EntityPublicationAdapter;
import oracle.iam.identity.sysauthz.schema.ApplicationInstanceAdapter;
import oracle.iam.identity.sysauthz.schema.ApplicationInstanceDataProvider;

import oracle.iam.identity.sysauthz.module.common.ApplicationInstanceAM;

////////////////////////////////////////////////////////////////////////////////
// class ApplicationInstanceAMImpl
// ~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~
/**
 ** The local {@link ApplicationModuleImpl} to coordinate certain task
 ** belonging to application instances.
 ** <p>
 ** ---------------------------------------------------------------------
 ** --- File generated by Oracle ADF Business Components Design Time.
 ** --- Mon Mar 06 19:50:30 CET 2017
 ** --- Custom code may be added to this class.
 ** --- Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class ApplicationInstanceAMImpl extends    ApplicationModuleImpl
                                       implements ApplicationInstanceAM {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>ApplicationInstanceAMImpl</code> application module that
   ** allows use as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public ApplicationInstanceAMImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   detailView
  /**
   ** Container's getter for <code>ApplicationInstanceDetailVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>ApplicationInstanceDetail</code>.
   */
  private ApplicationInstanceVOImpl detailView() {
    return (ApplicationInstanceVOImpl)findViewObject("ApplicationInstanceDetailVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   entitlementListView
  /**
   ** Container's getter for <code>EntitlementListVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>EntitlementList</code>.
   */
  private EntitlementVOImpl entitlementListView() {
    return (EntitlementVOImpl)findViewObject("EntitlementListVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   publicationView
  /**
   ** Container's getter for <code>EntityPublicationVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>EntityPublication</code>.
   */
  private EntityPublicationVOImpl publicationView() {
    return (EntityPublicationVOImpl)findViewObject("EntityPublicationVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (ApplicationInstanceAM)
  /**
   ** Finds a certain <code>Application Instance</code> by executing a query
   ** against the persistence layer which leverage the primary key of the entity
   ** object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Application Instance</code> to fetch from
   **                            the persistence layer.
   */
  @Override
  public void fetchByIdentifier(final String identifier) {
    final ApplicationInstanceVOImpl view = detailView();
    view.applyFilter(new Criterion(ApplicationInstanceAdapter.PK, identifier));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (ApplicationInstanceAM)
  /**
   ** Finds a certain <code>Application Instance</code> by executing a query
   ** against the persistence layer which leverage the unique key of the entity
   ** object.
   **
   ** @param  name               the unique identifier of the
   **                            <code>Application Instance</code> to fetch from
   **                            the persistence layer.
   */
  @Override
  public void fetchByName(final String name) {
    final ApplicationInstanceVOImpl view = detailView();
    view.applyFilter(new Criterion(ApplicationInstanceAdapter.NAME, name));
    view.executeQuery();

    final ApplicationInstanceVORowImpl row  = (ApplicationInstanceVORowImpl)view.first();
    final EntitlementVOImpl            ent  = entitlementListView();
    if (row != null) {
      final Criterion[] filters = {
        new Criterion("objectsKey",  row.getObjectsKey())
      , new Criterion("endpointKey", row.getEndpointKey())
      };
      ent.applyFilter(new Criteria(filters));
    }
    ent.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createDetail (ApplicationInstanceAM)
  /**
   ** Initialize the model to create a new <code>Application Instance</code>.
   */
  @Override
  public void createDetail() {
    final ApplicationInstanceVOImpl  detail = detailView();
    final ApplicationInstanceAdapter bean   = new ApplicationInstanceAdapter();
    final Row                        row    = detail.createRow();
    // call toRow to initialize, row handles lookups as well.
    bean.toRow(row, true);
    // initialize the primary key of the lookup to create with the proper value
    // to ensure the the iterators and dependend entities find the correct
    // binding value to initialize themself
    row.setAttribute(ApplicationInstanceAdapter.PK, "-1");
    // setting the proper row state to avoid the row is considered as candidate
    // for pending changes in ADF, until user types value by himself.
    row.setNewRowState(Row.STATUS_INITIALIZED);
    detail.insertRow(row);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail (ApplicationInstanceAM)
  /**
   ** Initialize the model to create a new <code>Application Instance</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Application Instance</code> to fetch from
   **                            the persistence layer.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchDetail(final String identifier) {
    fetchByIdentifier(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (ApplicationInstanceAM)
  /**
   ** Refresh the attributes belonging to a certain
   ** <code>Application Instance</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Application Instance</code> to
   **                            initialize.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshAttribute(final String identifier) {
    final ApplicationInstanceVOImpl view = detailView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   requeryPublication (ApplicationInstanceAM)
  /**
   ** Initialize the <code>Entity Publication</code>s belonging to a certain
   ** <code>Application Instance</code> to take in account pending changes on
   ** publications.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Application Instance</code> to
   **                            initialize.
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            assigned, revoked and modified publications.
   */
  @Override
  public void requeryPublication(final String identifier, final List<Map<String, EntityPublicationAdapter>> pending) {
    final Criterion[] filter = {
      new Criterion("entityId",   identifier)
    , new Criterion("entityType", PolicyConstants.Resources.APPLICATION_INSTANCE.getId())
    , new Criterion(EntityPublicationAdapter.ADD, SerializationUtils.serializeToString(pending.get(0)))
    , new Criterion(EntityPublicationAdapter.DEL, SerializationUtils.serializeToString(pending.get(1)))
    , new Criterion(EntityPublicationAdapter.MOD, SerializationUtils.serializeToString(pending.get(2)))
    };
    final EntityPublicationVOImpl view = publicationView();
    view.applyFilter(filter);
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   applyPublication (ApplicationInstanceAM)
  /**
   ** Initialize the <code>Entity Publication</code>s belonging to a certain
   ** <code>Application Instance</code> to take in account pending changes on
   ** publications.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Application Instance</code> to
   **                            initialize.
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            assigned, revoked and modified publications.
   */
  @Override
  public void applyPublication(final String identifier, final List<Map<String, EntityPublicationAdapter>> pending) {
    // prevent bogus input
    if (pending == null || pending.size() == 0)
      return;

    revokePublication(identifier, pending.get(1));
    assignPublication(identifier, pending.get(0));
    SerializationUtils.serializeToString(pending.get(2));
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   assignPublication (ApplicationInstanceAM)
  /**
   ** Assigns the passed <code>Entity Publication</code>s to an
   ** <code>Application Instance</code>.
   **
   ** @param  selection          the {@link List} of organizations represented
   **                            by {@link IdentityModelAdapterBean} to be
   **                            assigned.
   ** @param  entitlement        <code>true</code> if the publications should
   **                            also assigned to every entitlement which
   **                            belongs to the
   **                            <code>Application Instance</code>.
   */
  @Override
  public void assignPublication(final List<IdentityModelAdapterBean> selection, final Boolean entitlement) {
    // prevent bogus input
    if (selection == null || selection.size() == 0)
      return;

    // obtain the system identifier of the application instance selected in the
    // details view
    final ApplicationInstanceVORowImpl row = (ApplicationInstanceVORowImpl)detailView().getCurrentRow();
    final String                       key = row.getIdentifier().toString();

    // transfer
    List<EntityPublication> batch = new ArrayList<EntityPublication>();
    for (IdentityModelAdapterBean cursor : selection) {
      final Map<String, Object> value = cursor.getAttributeMap();
      String hierarchy = value.get("hierarchicalScope").toString();
      boolean actHierarchy = (hierarchy.equals("true")) ? true : false;

      final EntityPublication entry = new EntityPublication();
      entry.setEntityType(PolicyConstants.Resources.APPLICATION_INSTANCE.getId());
      entry.setScopeId((String)value.get("scopeId"));
      entry.setHierarchicalScope(actHierarchy);
      entry.setEntityId(key);

      batch.add(entry);
    }
    batch = ((ApplicationInstanceDataProvider)detailView().getDataProvider()).assignPublication(batch, entitlement);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   updatePublication (ApplicationInstanceAM)
  /**
   ** Performing an update on the passed <code>Entity Publications</code>.
   **
   ** @param  entityId           the system identifier of the entity to update.
   ** @param  metadata           the data providing the changes.
   */
  @Override
  public void updatePublication(final String entityId, final Map<String, Map<String, Object>> metadata) {
    // prevent bogus input
    if (entityId == null || metadata == null || metadata.size() == 0)
      return;

    // transfer the data provided in the metadata mapping to the typed
    // value holder to satisfy API constraints
    final List<EntityPublication> batch  = new ArrayList<EntityPublication>();
    final Iterator<String>        cursor = metadata.keySet().iterator();
    while (cursor.hasNext()) {
      final String              orgKey  = cursor.next();
      final Map<String, Object> entry   = metadata.get(orgKey);
      EntityPublication entityPublication = new EntityPublication();
      entityPublication.setEntityPublicationId((Long)entry.get("publicationId"));
      entityPublication.setEntityType(PolicyConstants.Resources.APPLICATION_INSTANCE.getId());
      entityPublication.setEntityId(entityId);
      entityPublication.setScopeId(orgKey);
      entityPublication.setHierarchicalScope((entry.get("organizationHierarchy").equals("true")) ? true : false);
      batch.add(entityPublication);
    }
    ((ApplicationInstanceDataProvider)detailView().getDataProvider()).updatePublication(batch);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   revokePublication (ApplicationInstanceAM)
  /**
   ** Revokes the passed <code>Entity Publication</code>s from an
   ** <code>Application Instance</code>.
   **
   ** @param  selection          the {@link List} of {@link EntityPublication}
   **                            to revoke.
   */
  @Override
  public void revokePublication(final List<EntityPublication> selection) {
    // prevent bogus input
    if (selection == null || selection.size() == 0)
      return;

    ((ApplicationInstanceDataProvider)detailView().getDataProvider()).revokePublication(selection);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   assignPublication
  /**
   ** Assigns the passed <code>Entity Publication</code>s to an
   ** <code>Application Instance</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Application Instance</code> to
   **                            initialize.
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            assigned publications.
   **                            Allowed object is {@link Map} where each
   **                            element is of type {@link String} for the key
   **                            and {@link EntityPublicationAdapter} for the
   **                            value.
   */
  private void assignPublication(final String identifier, final Map<String, EntityPublicationAdapter> pending) {
     // prevent bogus input
    if (pending == null || pending.size() == 0)
      return;

    // transfer the data provided in the pending mapping to the typed
    // value holder to satisfy API constraints
    List<EntityPublication> batch   = new ArrayList<EntityPublication>();
    for (Map.Entry <String, EntityPublicationAdapter> cursor : pending.entrySet()) {
      final EntityPublicationAdapter mab = cursor.getValue();
      final EntityPublication        pub = new EntityPublication();
      pub.setEntityId(identifier);
      pub.setEntityType(PolicyConstants.Resources.APPLICATION_INSTANCE.getId());
      pub.setScopeId(mab.getScopeId());
      pub.setScopeType(mab.getScopeType());
      pub.setHierarchicalScope(mab.getHierarchicalScope());
      batch.add(pub);
    }
    batch = ((ApplicationInstanceDataProvider)detailView().getDataProvider()).assignPublication(batch, true);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   revokePublication
  /**
   ** Revokes the passed <code>Entity Publication</code>s from an
   ** <code>Application Instance</code>.
   ** @param  identifier         the system identifier of the
   **                            <code>Application Instance</code> to
   **                            initialize.
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            revoked publications.
   **                            Allowed object is {@link Map} where each
   **                            element is of type {@link String} for the key
   **                            and {@link EntityPublicationAdapter} for the
   **                            value.
   */
  private void revokePublication(final String identifier, final Map<String, EntityPublicationAdapter> pending) {
     // prevent bogus input
    if (pending == null || pending.size() == 0)
      return;

    // transfer the data provided in the pending mapping to the typed
    // value holder to satisfy API constraints
    final List<EntityPublication> batch  = new ArrayList<EntityPublication>();
    for (Map.Entry <String, EntityPublicationAdapter> cursor : pending.entrySet()) {
      final EntityPublicationAdapter mab = cursor.getValue();
      final EntityPublication        pub = new EntityPublication();
      pub.setEntityId(identifier);
      pub.setEntityType(PolicyConstants.Resources.APPLICATION_INSTANCE.getId());
      pub.setScopeId(mab.getScopeId());
      pub.setHierarchicalScope(mab.getHierarchicalScope());
      batch.add(pub);
    }
    revokePublication(batch);
  }
}