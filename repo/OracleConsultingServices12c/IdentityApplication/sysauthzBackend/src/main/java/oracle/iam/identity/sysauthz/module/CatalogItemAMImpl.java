/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Authorization Management

    File        :   CatalogItemAMImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    CatalogItemAMImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysauthz.module;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.iam.ui.platform.model.filter.Criterion;

import oracle.iam.identity.sysauthz.module.common.CatalogItemAM;

import oracle.iam.identity.sysauthz.model.view.CatalogItemVOImpl;

import oracle.iam.identity.sysauthz.schema.CatalogItemAdapter;

import oracle.iam.identity.sysauthz.schema.CatalogItemDataProvider;

import oracle.iam.identity.sysauthz.schema.IdentityAdapter;

import oracle.jbo.Row;

////////////////////////////////////////////////////////////////////////////////
// class CatalogItemAMImpl
// ~~~~~ ~~~~~~~~~~~~~~~~~
/**
 ** The local {@link ApplicationModuleImpl} to coordinate certain task
 ** belonging to catalog items.
 ** <p>
 ** ---------------------------------------------------------------------
 ** ---    File generated by Oracle ADF Business Components Design Time.
 ** ---    Mon Mar 06 19:50:30 CET 2017
 ** ---    Custom code may be added to this class.
 ** ---    Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class CatalogItemAMImpl extends    ApplicationModuleImpl
                               implements CatalogItemAM {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>CatalogItemAMImpl</code> application module that allows use
   ** as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public CatalogItemAMImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   detailView
  /**
   ** Container's getter for <code>CatalogItemDetailVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>CatalogItemDetail</code>.
   */
  private CatalogItemVOImpl detailView() {
    return (CatalogItemVOImpl)findViewObject("CatalogItemDetailVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (CatalogItemAM)
  /**
   ** Finds a certain <code>Catalog Item</code> by executing a query against the
   ** persistence layer which leverage the primary key of the entity object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Catalog Item</code> to fetch from the
   **                            persistence layer.
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void fetchByIdentifier(final Long identifier) {
    final CatalogItemVOImpl view = detailView();
    view.applyFilter(new Criterion(CatalogItemAdapter.PK, identifier));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (CatalogItemAM)
  /**
   ** Finds a certain <code>Catalog Item</code> by executing a query against the
   ** persistence layer which leverage the unique key of the entity object.
   **
   ** @param  name               the unique identifier of the
   **                            <code>Catalog Item</code> to fetch from the
   **                            persistence layer.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByName(final String name) {
    final CatalogItemVOImpl view = detailView();
    view.applyFilter(new Criterion(CatalogItemAdapter.NAME, name));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (CatalogItemAM)
  /**
   ** Refresh the attributes belonging to a certain <code>Catalog Item</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Catalog Item</code> to initialize.
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void refreshAttribute(final Long identifier) {
    final CatalogItemVOImpl view = detailView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   assignRole (CatalogItemAM)
  /**
   ** Refresh the attributes belonging to a certain <code>Catalog</code>.
   **
   ** @param  roleKey            the system identifier of the
   **                            <code>Role</code> to asign.
   **                            Allowed object is {@link Long}.
   ** @param  attributeName      the name of the attribute this event
   **                            belongs to.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void assignRole(final Long roleKey, final String attributeName) {
    if (roleKey != null && attributeName != null) {
      final CatalogItemVOImpl view = detailView();
      final Row               row  = view.getCurrentRow();
      if (row != null) {
        final IdentityAdapter mab = CatalogItemDataProvider.lookupIdentity("catalog.lookup.role", roleKey);
        if (attributeName.equalsIgnoreCase(CatalogItemAdapter.APPROVER_ROLE)) {
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.APPROVER_ROLE), roleKey.toString());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.APPROVER_ROLE_NAME), mab.name());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.APPROVER_ROLE_DISPLAYNAME), mab.displayName());
        }
        else if (attributeName.equalsIgnoreCase(CatalogItemAdapter.CERTIFIER_ROLE)) {
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.CERTIFIER_ROLE), roleKey.toString());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.CERTIFIER_ROLE_NAME), mab.name());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.CERTIFIER_ROLE_DISPLAYNAME), mab.displayName());
        }
        else if (attributeName.equalsIgnoreCase(CatalogItemAdapter.FULFILLMENT_ROLE)) {
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.FULFILLMENT_ROLE), roleKey.toString());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.FULFILLMENT_ROLE_NAME), mab.name());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.FULFILLMENT_ROLE_DISPLAYNAME), mab.displayName());
        }
      }
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   assignUser (CatalogItemAM)
  /**
   ** Refresh the attributes belonging to a certain <code>Catalog Item</code>.
   **
   ** @param  userKey            the system identifier of the
   **                            <code>User</code> to asign.
   **                            Allowed object is {@link Long}.
   ** @param  attributeName      the name of the attribute this event
   **                            belongs to.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void assignUser(final Long userKey, final String attributeName) {
    if (userKey != null && attributeName != null) {
      final CatalogItemVOImpl view = detailView();
      final Row               row  = view.getCurrentRow();
      if (row != null) {
        final IdentityAdapter mab = CatalogItemDataProvider.lookupIdentity("catalog.lookup.user", userKey);
        if (attributeName.equalsIgnoreCase(CatalogItemAdapter.APPROVER_USER)) {
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.APPROVER_USER), userKey.toString());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.APPROVER_USER_NAME), mab.name());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.APPROVER_USER_DISPLAYNAME), mab.displayName());
        }
        else if (attributeName.equalsIgnoreCase(CatalogItemAdapter.CERTIFIER_USER)) {
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.CERTIFIER_USER_DISPLAYNAME), userKey.toString());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.CERTIFIER_USER_NAME), mab.name());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.CERTIFIER_USER_DISPLAYNAME), mab.displayName());
        }
        else if (attributeName.equalsIgnoreCase(CatalogItemAdapter.FULFILLMENT_USER)) {
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.FULFILLMENT_USER_DISPLAYNAME), userKey.toString());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.FULFILLMENT_USER_NAME), mab.name());
          row.setAttribute(row.getAttributeIndexOf(CatalogItemAdapter.FULFILLMENT_USER_DISPLAYNAME), mab.displayName());
        }
      }
    }
  }
}