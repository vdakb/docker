/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Authorization Management

    File        :   EntityPublicationEOImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    EntityPublicationEOImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysauthz.model.entity;

import oracle.jbo.Key;
import oracle.jbo.Row;

import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;

import oracle.iam.ui.platform.model.common.DataProvider;
import oracle.iam.ui.platform.model.common.ModelAdapterBean;

import oracle.iam.ui.common.model.org.OrganizationAdapterBean;

import oracle.iam.ui.common.model.org.entity.OrganizationEOImpl;

import oracle.iam.identity.sysauthz.schema.DataProviderFactory;

////////////////////////////////////////////////////////////////////////////////
// class EntityPublicationEOImpl
// ~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~
/**
 ** The <code>Entity Object</code> to coordinate representations of database
 ** rows belonging to Entity Publications.
 ** <p>
 ** An <code>Entity Object</code> provides an object-oriented representation of
 ** the data it caches from a database object, such as a table or view. Database
 ** rows are presented as individual Entities, in which attributes typically
 ** correspond to columns in the corresponding table.
 ** ---------------------------------------------------------------------
 ** --- File generated by Oracle ADF Business Components Design Time.
 ** --- Tue Mar 07 19:41:42 CET 2017
 ** --- Custom code may be added to this class.
 ** --- Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class EntityPublicationEOImpl extends OrganizationEOImpl {

  //////////////////////////////////////////////////////////////////////////////
  // static final attributes
  //////////////////////////////////////////////////////////////////////////////

  public static final int KEY               = AttributesEnum.publicationId.index();
  public static final int ENTITYID          = AttributesEnum.entityId.index();
  public static final int ENTITYTYPE        = AttributesEnum.entityType.index();
  public static final int SCOPEID           = AttributesEnum.scopeId.index();
  public static final int SCOPENAME         = AttributesEnum.scopeName.index();
  public static final int SCOPETYPE         = AttributesEnum.scopeType.index();
  public static final int HIERARCHICALSCOPE = AttributesEnum.hierarchicalScope.index();

  //////////////////////////////////////////////////////////////////////////////
  // static attributes
  //////////////////////////////////////////////////////////////////////////////

  private static EntityDefImpl definition;

  //////////////////////////////////////////////////////////////////////////////
  // Member classes
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // class AttributesEnum
  /**
   ** AttributesEnum: generated enum for identifying attributes and accessors.
   ** Do not modify.
   */
  @SuppressWarnings({ "oracle.jbo.attribute-enumeration-classes-rule", "oracle.jbo.attribute-order-rule" })
  private static enum AttributesEnum {
    publicationId {

      //////////////////////////////////////////////////////////////////////////
      // static final attributes
      //////////////////////////////////////////////////////////////////////////

      // the official serial version ID which says cryptically which version
      // we're compatible with
      @SuppressWarnings("compatibility:6579965518766590184")
      private static final long serialVersionUID = -1L;

      //////////////////////////////////////////////////////////////////////////
      // Methods of abstract base classes
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // Methode: put (AttributesEnum)
      @Override
      public void put(final EntityPublicationEOImpl obj, final Object value) {
        obj.setIdentifier((String)value);
      }

      //////////////////////////////////////////////////////////////////////////
      // Methode: get (AttributesEnum)
      @Override
      public Object get(final EntityPublicationEOImpl obj) {
        return obj.getIdentifier();
      }
    }
    ,
    entityId {

      //////////////////////////////////////////////////////////////////////////
      // static final attributes
      //////////////////////////////////////////////////////////////////////////

      // the official serial version ID which says cryptically which version
      // we're compatible with
      @SuppressWarnings("compatibility:6579965518766590184")
      private static final long serialVersionUID = -1L;

      //////////////////////////////////////////////////////////////////////////
      // Methods of abstract base classes
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // Methode: put (AttributesEnum)
      @Override
      public void put(final EntityPublicationEOImpl obj, final Object value) {
        obj.setEntityId((Long)value);
      }

      //////////////////////////////////////////////////////////////////////////
      // Methode: get (AttributesEnum)
      @Override
      public Object get(final EntityPublicationEOImpl obj) {
        return obj.getEntityId();
      }
    }
    ,
    entityType {

      //////////////////////////////////////////////////////////////////////////
      // static final attributes
      //////////////////////////////////////////////////////////////////////////

      // the official serial version ID which says cryptically which version
      // we're compatible with
      @SuppressWarnings("compatibility:6579965518766590184")
      private static final long serialVersionUID = -1L;

      //////////////////////////////////////////////////////////////////////////
      // Methods of abstract base classes
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // Methode: put (AttributesEnum)
      @Override
      public void put(final EntityPublicationEOImpl obj, final Object value) {
        obj.setEntityType((String)value);
      }

      //////////////////////////////////////////////////////////////////////////
      // Methode: get (AttributesEnum)
      @Override
      public Object get(final EntityPublicationEOImpl obj) {
        return obj.getEntityType();
      }
    }
    ,
    scopeId {

      //////////////////////////////////////////////////////////////////////////
      // static final attributes
      //////////////////////////////////////////////////////////////////////////

      // the official serial version ID which says cryptically which version
      // we're compatible with
      @SuppressWarnings("compatibility:6579965518766590184")
      private static final long serialVersionUID = -1L;

      //////////////////////////////////////////////////////////////////////////
      // Methods of abstract base classes
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // Methode: put (AttributesEnum)
      @Override
      public void put(final EntityPublicationEOImpl obj, final Object value) {
        obj.setScopeId((String)value);
      }

      //////////////////////////////////////////////////////////////////////////
      // Methode: get (AttributesEnum)
      @Override
      public Object get(final EntityPublicationEOImpl obj) {
        return obj.getScopeId();
      }
    }
    ,
    scopeName {

      //////////////////////////////////////////////////////////////////////////
      // static final attributes
      //////////////////////////////////////////////////////////////////////////

      // the official serial version ID which says cryptically which version
      // we're compatible with
      @SuppressWarnings("compatibility:6579965518766590184")
      private static final long serialVersionUID = -1L;

      //////////////////////////////////////////////////////////////////////////
      // Methods of abstract base classes
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // Methode: put (AttributesEnum)
      @Override
      public void put(final EntityPublicationEOImpl obj, final Object value) {
        obj.setScopeName((String)value);
      }

      //////////////////////////////////////////////////////////////////////////
      // Methode: get (AttributesEnum)
      @Override
      public Object get(final EntityPublicationEOImpl obj) {
        return obj.getScopeName();
      }
    }
    ,
    scopeType {

      //////////////////////////////////////////////////////////////////////////
      // static final attributes
      //////////////////////////////////////////////////////////////////////////

      // the official serial version ID which says cryptically which version
      // we're compatible with
      @SuppressWarnings("compatibility:6579965518766590184")
      private static final long serialVersionUID = -1L;

      //////////////////////////////////////////////////////////////////////////
      // Methods of abstract base classes
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // Methode: put (AttributesEnum)
      @Override
      public void put(final EntityPublicationEOImpl obj, final Object value) {
        obj.setScopeType((String)value);
      }

      //////////////////////////////////////////////////////////////////////////
      // Methode: get (AttributesEnum)
      @Override
      public Object get(final EntityPublicationEOImpl obj) {
        return obj.getScopeType();
      }
    }
    ,
    hierarchicalScope {

      //////////////////////////////////////////////////////////////////////////
      // static final attributes
      //////////////////////////////////////////////////////////////////////////

      // the official serial version ID which says cryptically which version
      // we're compatible with
      @SuppressWarnings("compatibility:6579965518766590184")
      private static final long serialVersionUID = -1L;

      //////////////////////////////////////////////////////////////////////////
      // Methods of abstract base classes
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // Methode: put (AttributesEnum)
      @Override
      public void put(final EntityPublicationEOImpl obj, final Object value) {
        obj.setHierarchicalScope((String)value);
      }

      //////////////////////////////////////////////////////////////////////////
      // Methode: get (AttributesEnum)
      @Override
      public Object get(final EntityPublicationEOImpl obj) {
        return obj.getHierarchicalScope();
      }
    };

    ////////////////////////////////////////////////////////////////////////////
    // static final attributes
    ////////////////////////////////////////////////////////////////////////////

    // the official serial version ID which says cryptically which version we're
    // compatible with
    @SuppressWarnings("compatibility:-7008846538362070158")
    private static final long serialVersionUID = -1L;

    ////////////////////////////////////////////////////////////////////////////
    // static attributes
    ////////////////////////////////////////////////////////////////////////////

    static AttributesEnum[]   values           = null;

    private static int        firstIndex       = EntityDefImpl.findDefObjectNoSub("oracle.iam.ui.common.model.org.entity.OrganizationEO").getAttributeCount();

    ////////////////////////////////////////////////////////////////////////////
    // Accessor and Mutator methods
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // Methode: count
    /**
     ** Returns the amount of attributes registered so far at the time of
     ** invocation.
     **
     ** @return                  the amount of attributes registered so far at
     **                          the time of invocation.
     */
    public static int count() {
      return AttributesEnum.staticValues().length;
    }

    ////////////////////////////////////////////////////////////////////////////
    // Methode: index
    /**
     ** Returns the ordinal of the attributes (its position in its enum
     ** declaration, where the initial index is assigned an ordinal of zero).
     **
     ** @return                  the ordinal of the attributes.
     */
    public int index() {
      return ordinal();
    }

    ////////////////////////////////////////////////////////////////////////////
    // Methode: staticValues
    /**
     ** Returns the vector of attributes registered so far at the time of
     ** invocation.
     **
     ** @return                  the vector of attributes registered so far at
     **                          the time of invocation.
     */
    public static AttributesEnum[] staticValues() {
      if (values == null) {
        values = AttributesEnum.values();
      }
      return values;
    }

    ////////////////////////////////////////////////////////////////////////////
    // Methode: get
    public abstract void put(final EntityPublicationEOImpl object, final Object value);

    ////////////////////////////////////////////////////////////////////////////
    // Methode: get
    public abstract Object get(final EntityPublicationEOImpl object);
  };

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs an empty <code>EntityPublicationEOImpl</code> values object
   ** that allows use as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public EntityPublicationEOImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor and Mutator methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   setIdentifier
  /**
   ** Sets the attribute value for <code>KEY</code> using the alias name
   ** <code>key</code>.
   **
   ** @param  value              the attribute value for <code>KEY</code> using
   **                            the alias name <code>key</code>.
   **                            Allowed object is {@link String}.
   */
  public void setIdentifier(final String value) {
    setAttributeInternal(KEY, value);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   getIdentifier
  /**
   ** Returns the attribute value for <code>KEY</code> using the alias name
   ** <code>key</code>.
   **
   ** @return                    the attribute value for <code>KEY</code> using
   **                            the alias name <code>key</code>.
   **                            Possible object is {@link String}.
   */
  public String getIdentifier() {
    return (String)getAttributeInternal(KEY);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   setEntityId
  /**
   ** Sets the attribute value for <code>ENTITYID</code> using the alias
   ** name <code>entityId</code>.
   **
   ** @param  value              the attribute value for
   **                            <code>ENTITYID</code> using the alias name
   **                            <code>entityId</code>.
   **                            Allowed object is {@link Long}.
   */
  public void setEntityId(final Long value) {
    setAttributeInternal(ENTITYID, value);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   getEntityId
  /**
   ** Returns the attribute value for <code>ENTITYID</code> using the alias
   ** name <code>entityId</code>.
   **
   ** @return                    the attribute value for
   **                            <code>ENTITYID</code> using the alias name
   **                            <code>entityId</code>.
   **                            Possible object is {@link Long}.
   */
  public Long getEntityId() {
    return (Long)getAttributeInternal(ENTITYID);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   setEntityType
  /**
   ** Sets the attribute value for <code>ENTITYTYPE</code> using the alias name
   ** <code>entityType</code>.
   **
   ** @param  value              the attribute value for <code>ENTITYTYPE</code>
   **                            using the alias name <code>entityType</code>.
   **                            Allowed object is {@link String}.
   */
  public void setEntityType(final String value) {
    setAttributeInternal(ENTITYTYPE, value);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   getEntityType
  /**
   ** Returns the attribute value for <code>ENTITYTYPE</code> using the alias name
   ** <code>entityType</code>.
   **
   ** @return                    the attribute value for <code>ENTITYTYPE</code> using
   **                            the alias name <code>entityType</code>.
   **                            Possible object is {@link String}.
   */
  public String getEntityType() {
    return (String)getAttributeInternal(ENTITYTYPE);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   setScopeId
  /**
   ** Sets the attribute value for <code>SCOPEID</code> using the alias
   ** name <code>scopeId</code>.
   **
   ** @param  value              the attribute value for
   **                            <code>SCOPEID</code> using the alias name
   **                            <code>scopeId</code>.
   **                            Allowed object is {@link String}.
   */
  public void setScopeId(final String value) {
    setAttributeInternal(SCOPEID, value);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   getScopeId
  /**
   ** Returns the attribute value for <code>SCOPEID</code> using the alias
   ** name <code>scopeId</code>.
   **
   ** @return                    the attribute value for
   **                            <code>SCOPEID</code> using the alias name
   **                            <code>scopeId</code>.
   **                            Possible object is {@link String}.
   */
  public String getScopeId() {
    return (String)getAttributeInternal(SCOPEID);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   setScopeName
  /**
   ** Sets the attribute value for <code>SCOPENAME</code> using the alias name
   ** <code>scopeName</code>.
   **
   ** @param  value              the attribute value for <code>SCOPENAME</code>
   **                            using the alias name <code>scopeName</code>.
   **                            Allowed object is {@link String}.
   */
  public void setScopeName(final String value) {
    setAttributeInternal(SCOPENAME, value);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   getScopeName
  /**
   ** Returns the attribute value for <code>SCOPENAME</code> using the alias name
   ** <code>scopeName</code>.
   **
   ** @return                    the attribute value for <code>SCOPENAME</code> using
   **                            the alias name <code>scopeName</code>.
   **                            Possible object is {@link String}.
   */
  public String getScopeName() {
    return (String)getAttributeInternal(SCOPENAME);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   setScopeType
  /**
   ** Sets the attribute value for <code>SCOPETYPE</code> using the alias name
   ** <code>scopeType</code>.
   **
   ** @param  value              the attribute value for <code>SCOPETYPE</code>
   **                            using the alias name <code>scopeType</code>.
   **                            Allowed object is {@link String}.
   */
  public void setScopeType(final String value) {
    setAttributeInternal(SCOPETYPE, value);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   getScopeType
  /**
   ** Returns the attribute value for <code>SCOPETYPE</code> using the alias name
   ** <code>scopeType</code>.
   **
   ** @return                    the attribute value for <code>SCOPETYPE</code>
   **                            using the alias name <code>scopeType</code>.
   **                            Possible object is {@link String}.
   */
  public String getScopeType() {
    return (String)getAttributeInternal(SCOPETYPE);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   setHierarchicalScope
  /**
   ** Sets the attribute value for <code>HIERARCHICALSCOPE</code> using the
   ** alias name <code>hierarchicalScope</code>.
   **
   ** @param  value              the attribute value for
   **                            <code>HIERARCHICALSCOPE</code> using the alias
   **                            name <code>hierarchicalScope</code>.
   **                            Allowed object is {@link String}.
   */
  public void setHierarchicalScope(final String value) {
    setAttributeInternal(HIERARCHICALSCOPE, value);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   getHierarchicalScope
  /**
   ** Returns the attribute value for <code>HIERARCHICALSCOPE</code> using the
   ** alias name <code>hierarchicalScope</code>.
   **
   ** @return                    the attribute value for
   **                            <code>HIERARCHICALSCOPE</code> using the alias
   **                            name <code>hierarchicalScope</code>.
   **                            Possible object is {@link String}.
   */
  public String getHierarchicalScope() {
    return (String)getAttributeInternal(HIERARCHICALSCOPE);
  }


  //////////////////////////////////////////////////////////////////////////////
  // Methode:   setAttrInvokeAccessor (overridden)
  /**
   ** Generated method. Do not modify.
   **
   ** @param  index              the index identifying the attribute in a row.
   ** @param  value              the value to assign to the attribute.
   ** @param  attribute          the attribute the value has to assign to.
   **
   ** @throws Exception          if the accessor is not updateable.
   */
  @Override
  protected void setAttrInvokeAccessor(final int index, final Object value, final AttributeDefImpl attribute)
    throws Exception {

    if ((index >= AttributesEnum.firstIndex) && (index < AttributesEnum.count())) {
      AttributesEnum.staticValues()[index].put(this, value);
    }
    else {
      // ensure inheritance
      super.setAttrInvokeAccessor(index, value, attribute);
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methode:   getAttrInvokeAccessor (overridden)
  /**
   ** Generated method. Do not modify.
   **
   ** @param  index              the index identifying the attribute in a row.
   ** @param  attribute          the attribute to the value has to retrieved.
   **
   ** @return                    the attribute value.
   **
   ** @throws Exception          if the accessor is not updateable.
   */
  @Override
  protected Object getAttrInvokeAccessor(final int index, final AttributeDefImpl attribute)
    throws Exception {

    if ((index >= AttributesEnum.firstIndex) && (index < AttributesEnum.count())) {
      return AttributesEnum.staticValues()[index].get(this);
    }
    else {
      // ensure inheritance
      return super.getAttrInvokeAccessor(index, attribute);
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of abstract base classes
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   toAdapterBean (OIMProgrammaticEO)
  /**
   ** Factory method to create an instance of {@link OrganizationAdapterBean}
   ** which populates its attribute values from the specified {@link Row}.
   **
   ** @param  row                the record providing the raw data.
   **
   ** @return                    an instance of {@link OrganizationAdapterBean}.
   */
  @Override
  public ModelAdapterBean toAdapterBean(final Row row) {
    return new OrganizationAdapterBean(row);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   getDataProvider (OIMProgrammaticEO)
  /**
   ** Factory method to create an instance of a proper {@link DataProvider}.
   **
   ** @return                    an instance of {@link DataProvider}.
   */
  @Override
  public DataProvider<? extends ModelAdapterBean> getDataProvider() {
    return DataProviderFactory.createEntityPublicationDataProvider();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods grouped by functionality
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createPrimaryKey
  /**
   ** Factory method to create a primary row identifier.
   ** <p>
   ** Users should not modify keys: JDeveloper treats keys as if they are
   ** immutable.
   ** <p>
   ** Call getKey() on a row object to get its primary identifier.
   **
   ** @param  entityType         the value to embed in the primary key
   **                            constituent belonging to the type of the entity
   **                            publication.
   **                            Allowed object is {@link String}.
   ** @param  entityId           the value to embed in the primary key
   **                            constituent belonging to the system identifier
   **                            of the entity itself.
   **                            Allowed object is {@link Long}.
   **
   ** @return                    a {@link Key} object based on given key
   **                            constituents.
   */
  public static Key createPrimaryKey(final String entityType, final Long entityId) {
    return new Key(new Object[]{entityType, entityId});
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   getDefinitionObject
  /**
   ** Returns the named Entity Object definition for client authorization
   ** groups.
   ** <p>
   ** This method use the fully qualified name
   ** <code>oracle.iam.identity.sysauthz.model.entity.EntityPublicationEO</code>
   ** to get the entity definition from <code>MetaObjectManager</code> and
   ** returns the corresponding Entity definition object.
   **
   ** @return                    the entity definition object corresponding to
   **                            the fully qualified name
   **                            <code>oracle.iam.identity.sysauthz.model.entity.EntityPublicationEO</code>
   */
  public static synchronized EntityDefImpl getDefinitionObject() {
    if (definition == null || definition.isDirty())
      definition = EntityDefImpl.findDefObject("oracle.iam.identity.sysauthz.model.entity.EntityPublicationEO");

    return definition;
  }
}