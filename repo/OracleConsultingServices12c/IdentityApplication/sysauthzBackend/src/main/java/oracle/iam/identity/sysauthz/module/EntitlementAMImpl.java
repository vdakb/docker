/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Authorization Management

    File        :   EntitlementAMImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    EntitlementAMImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysauthz.module;

import java.util.Map;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.iam.platform.authopss.api.PolicyConstants;
import oracle.iam.platform.authopss.vo.EntityPublication;

import oracle.iam.ui.platform.utils.SerializationUtils;

import oracle.iam.ui.platform.model.filter.Criterion;

import oracle.iam.ui.platform.model.common.IdentityModelAdapterBean;

import oracle.iam.identity.sysauthz.module.common.EntitlementAM;

import oracle.iam.identity.sysauthz.model.view.EntitlementVOImpl;
import oracle.iam.identity.sysauthz.model.view.EntitlementVORowImpl;
import oracle.iam.identity.sysauthz.model.view.EntityPublicationVOImpl;

import oracle.iam.identity.sysauthz.schema.EntitlementAdapter;
import oracle.iam.identity.sysauthz.schema.EntitlementDataProvider;
import oracle.iam.identity.sysauthz.schema.EntityPublicationAdapter;

////////////////////////////////////////////////////////////////////////////////
// class EntitlementAMImpl
// ~~~~~ ~~~~~~~~~~~~~~~~~
/**
 ** The local {@link ApplicationModuleImpl} to coordinate certain task
 ** belonging to entitlements.
 ** <p>
 ** ---------------------------------------------------------------------
 ** ---    File generated by Oracle ADF Business Components Design Time.
 ** ---    Mon Mar 06 19:50:30 CET 2017
 ** ---    Custom code may be added to this class.
 ** ---    Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class EntitlementAMImpl extends    ApplicationModuleImpl
                               implements EntitlementAM {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>EntitlementAMImpl</code> application module that
   ** allows use as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public EntitlementAMImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   detailView
  /**
   ** Container's getter for <code>EntitlementDetailVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>EntitlementDetail</code>.
   */
  private EntitlementVOImpl detailView() {
    return (EntitlementVOImpl)findViewObject("EntitlementDetailVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   publicationView
  /**
   ** Container's getter for <code>EntityPublicationVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>EntityPublication</code>.
   */
  private EntityPublicationVOImpl publicationView() {
    return (EntityPublicationVOImpl)findViewObject("EntityPublicationVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (EntitlementAM)
  /**
   ** Finds a certain <code>Entitlement</code> by executing a query against the
   ** persistence layer which leverage the primary key of the entity object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Entitlement</code> to fetch from the
   **                            persistence layer.
   */
  @Override
  public void fetchByIdentifier(final String identifier) {
    final EntitlementVOImpl view = detailView();
    view.applyFilter(new Criterion(EntitlementAdapter.PK, identifier));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (EntitlementAM)
  /**
   ** Finds a certain <code>Entitlement</code> by executing a query against the
   ** persistence layer which leverage the unique key of the entity object.
   **
   ** @param  name               the unique identifier of the
   **                            <code>Entitlement</code> to fetch from the
   **                            persistence layer.
   */
  @Override
  public void fetchByName(final String name) {
    final EntitlementVOImpl view = detailView();
    view.applyFilter(new Criterion("entitlementCode", name));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   assignEntitlementPublication (EntitlementAM)
  /**
   ** Assigns the passed <code>Entity Publication</code>s to an
   ** <code>Entitlement</code>.
   **
   ** @param  selection          the {@link List} of organizations represented
   **                            by {@link IdentityModelAdapterBean} to be
   **                            assigned.
   */
  @Override
  public void assignEntitlementPublication(final List<IdentityModelAdapterBean> selection) {
    // prevent bogus input
    if (selection == null || selection.size() == 0)
      return;

    // obtain the system identifier of the application instance selected in the
    // details view
    final EntitlementVORowImpl row = (EntitlementVORowImpl)detailView().getCurrentRow();
    final String               key = row.getIdentifier().toString();

    // transfer
    List<EntityPublication> batch = new ArrayList<EntityPublication>();
    for (IdentityModelAdapterBean cursor : selection) {
      final Map<String, Object> value = cursor.getAttributeMap();
      String hierarchy = value.get("hierarchicalScope").toString();
      boolean actHierarchy = (hierarchy.equals("true")) ? true : false;

      final EntityPublication entry = new EntityPublication();
      entry.setEntityType(PolicyConstants.Resources.IT_RESOURCE_ENTITLEMENT.getId());
      entry.setScopeId((String)value.get("scopeId"));
      entry.setHierarchicalScope(actHierarchy);
      entry.setEntityId(key);

      batch.add(entry);
    }

    batch = ((EntitlementDataProvider)detailView().getDataProvider()).assignPublication(batch);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   revokeEntitlementPublication (EntitlementAM)
  /**
   ** Revokes the passed <code>Entity Publication</code>s from an
   ** <code>Entitlement</code>.
   **
   ** @param  selection          the {@link List} of {@link EntityPublication}
   **                            to revoke.
   */
  @Override
  public void revokeEntitlementPublication(final List<EntityPublication> selection) {
    // prevent bogus input
    if (selection == null || selection.size() == 0)
      return;

    ((EntitlementDataProvider)detailView().getDataProvider()).revokePublication(selection);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (EntitlementAM)
  /**
   ** Refresh the attributes belonging to a certain <code>Entitlement</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Entitlement</code> to initialize.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshAttribute(final String identifier) {
    final EntitlementVOImpl view = detailView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   requeryPublication (EntitlementAM)
  /**
   ** Initialize the <code>Entity Publication</code>s belonging to a certain
   ** <code>Entitlement</code> to take in account pending changes on
   ** publications.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Entitlement</code> to initialize.
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            assigned, revoked and modified publications.
   */
  @Override
  public void requeryPublication(final String identifier, final List<Map<String, Object>> pending) {
    final Criterion[] filter = {
      new Criterion("entityId",   identifier)
    , new Criterion("entityType", PolicyConstants.Resources.IT_RESOURCE_ENTITLEMENT.getId())
    , new Criterion(EntityPublicationAdapter.ADD, SerializationUtils.serializeToString(pending.get(0)))
    , new Criterion(EntityPublicationAdapter.DEL, SerializationUtils.serializeToString(pending.get(1)))
    , new Criterion(EntityPublicationAdapter.MOD, SerializationUtils.serializeToString(pending.get(2)))
    };
    final EntityPublicationVOImpl view = publicationView();
    view.applyFilter(filter);
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   updatePublication (EntitlementAM)
  /**
   ** Performing an update on the passed <code>Entity Publications</code>.
   **
   ** @param  entityType         the type of the entity to update, either
   **                            <ul>
   **                              <li>Entitlement
   **                              <li>Entitlement
   **                            </ul>.
   ** @param  entityId           the system identifier of the entity to update.
   ** @param  metadata           the data providing the changes.
   */
  @Override
  public void updatePublication(String entityType, final String entityId, final Map<String, Map<String, Object>> metadata) {
    // prevent bogus input
    if (entityType == null || entityId == null || metadata == null || metadata.size() == 0)
      return;

    // transform the passed entity type
    if (entityType.equals("Entitlement"))
      entityType = PolicyConstants.Resources.APPLICATION_INSTANCE.getId();
    else if (entityType.equals("Entitlement"))
      entityType = PolicyConstants.Resources.IT_RESOURCE_ENTITLEMENT.getId();
    else
      return;

    // transfer the data provided in the metadata mapping to the typed
    // value holder to satisfy API constraints
    final List<EntityPublication> batch  = new ArrayList<EntityPublication>();
    final Iterator<String>        cursor = metadata.keySet().iterator();
    while (cursor.hasNext()) {
      final String              orgKey  = cursor.next();
      final Map<String, Object> entry   = metadata.get(orgKey);
      EntityPublication entityPublication = new EntityPublication();
      entityPublication.setEntityPublicationId((Long)entry.get("publicationId"));
      entityPublication.setEntityType(entityType);
      entityPublication.setEntityId(entityId);
      entityPublication.setScopeId(orgKey);
      entityPublication.setHierarchicalScope((entry.get("organizationHierarchy").equals("true")) ? true : false);
      batch.add(entityPublication);
    }

    ((EntitlementDataProvider)detailView().getDataProvider()).updatePublication(batch);
  }
}