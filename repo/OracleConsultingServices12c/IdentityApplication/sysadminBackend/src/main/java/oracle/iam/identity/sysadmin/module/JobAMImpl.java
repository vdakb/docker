/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Administration Management

    File        :   JobAMImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    JobAMImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysadmin.module;

import java.util.Map;

import oracle.jbo.Row;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.iam.ui.platform.model.filter.Criterion;

import oracle.iam.ui.platform.utils.SerializationUtils;

import oracle.iam.identity.sysadmin.schema.JobAdapter;
import oracle.iam.identity.sysadmin.schema.JobParameterAdapter;

import oracle.iam.identity.sysadmin.module.common.JobAM;

import oracle.iam.identity.sysadmin.schema.JobDataProvider;

import oracle.iam.identity.sysadmin.model.view.JobVOImpl;
import oracle.iam.identity.sysadmin.model.view.JobVORowImpl;
import oracle.iam.identity.sysadmin.model.view.JobHistoryVOImpl;
import oracle.iam.identity.sysadmin.model.view.JobParameterVOImpl;

////////////////////////////////////////////////////////////////////////////////
// class JobAMImpl
// ~~~~~ ~~~~~~~~~
/**
 ** The local {@link ApplicationModuleImpl} to coordinate certain task
 ** belonging to jobs.
 ** <p>
 ** ---------------------------------------------------------------------
 ** --- File generated by Oracle ADF Business Components Design Time.
 ** --- Mon Mar 06 19:50:30 CET 2017
 ** --- Custom code may be added to this class.
 ** --- Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class JobAMImpl extends    ApplicationModuleImpl
                       implements JobAM {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>JobAMImpl</code> application module that allows use as
   ** a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public JobAMImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   detailView
  /**
   ** Container's getter for <code>JobDetailVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>JobDetail</code>.
   **                            <br>
   **                            Possible object is {@link JobVOImpl).
   */
  private JobVOImpl detailView() {
    return (JobVOImpl)findViewObject("JobDetailVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   parameterView
  /**
   ** Container's getter for <code>JobParameterVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>JobParameter</code>.
   **                            <br>
   **                            Possible object is {@link JobParameterVOImpl).
   */
  private JobParameterVOImpl parameterView() {
    return (JobParameterVOImpl)findViewObject("JobParameterVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   historyView
  /**
   ** Container's getter for <code>JobHistoryVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>JobHistory</code>.
   **                            <br>
   **                            Possible object is {@link JobHistoryVOImpl).
   */
  private JobHistoryVOImpl historyView() {
    return (JobHistoryVOImpl)findViewObject("JobHistoryVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (JobAM)
  /**
   ** Finds a certain <code>Schedule Job</code> by executing a query against the
   ** persistence layer which leverage the primary key of the entity object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByIdentifier(final String identifier) {
    final JobVOImpl view = detailView();
    view.applyFilter(new Criterion(JobAdapter.PK, identifier));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (JobAM)
  /**
   ** Finds a certain <code>Schedule Job</code> by executing a query against the
   ** persistence layer which leverage the unique name of the entity object.
   **
   ** @param  name               the unique name  of the
   **                            <code>Schedule Job</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByName(final String name) {
    final JobVOImpl view = detailView();
    view.applyFilter(new Criterion(JobAdapter.PK, name));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail (JobAM)
  /**
   ** Initialize the model to maintain an existing <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchDetail(final String identifier) {
    fetchByName(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createDetail (JobAM)
  /**
   ** Initialize the model to create a new <code>Schedule Job</code>.
   */
  @Override
  public void createDetail() {
    final JobVOImpl  detail = detailView();
    final JobAdapter bean   = new JobAdapter();
    final Row        row    = detail.createRow();
    // call toRow to initialize, row handles lookups as well.
    bean.toRow(row, true);
    // initialize the primary key of the lookup to create with the proper value
    // to ensure the the iterators and dependend entities find the correct
    // binding value to initialize themself
    row.setAttribute(JobVORowImpl.TRIGGERSTATUS,  Boolean.TRUE);
    row.setAttribute(JobVORowImpl.TRIGGERTYPE,    "None");
    row.setAttribute(JobVORowImpl.RETRYCOUNT,     0);
    // setting the proper row state to avoid the row is considered as candidate
    // for pending changes in ADF, until user types value by himself.
    row.setNewRowState(Row.STATUS_INITIALIZED);
    detail.insertRow(row);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (JobAM)
  /**
   ** Refresh the attributes belonging to a certain <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to refresh from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshAttribute(final String identifier) {
    final JobVOImpl view = detailView();
    view.reset();
    view.executeQuery();
  }
  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshParameter (JobAM)
  /**
   ** Refresh the <code>Job Parameter</code>s belonging to a certain
   ** <code>Schedule Job</code>.
   **
   ** @param  jobName            the system identifier of the
   **                            <code>Schedule Job</code> to query.
   **                            <br>
   **                            Allowed object is {@link String}.
   ** @param  taskName           the system identifier of the
   **                            <code>Schedule Task</code> to query.
   **                            <br>
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            modified values.
   **                            <br>
   **                            Allowed object is {@link Map}.
   */
  @Override
  public void refreshParameter(final String jobName, final String taskName, final Map<String, Map<String, Object>> pending) {
    final Criterion[] filter = {
      new Criterion(JobParameterAdapter.FK_JOB, jobName)
    , new Criterion(JobParameterAdapter.FK_JOB, taskName)
    , new Criterion(JobParameterAdapter.ADD,    SerializationUtils.serializeToString(pending.get(JobParameterAdapter.ADD)))
    , new Criterion(JobParameterAdapter.MOD,    SerializationUtils.serializeToString(pending.get(JobParameterAdapter.MOD)))
    , new Criterion(JobParameterAdapter.DEL,    SerializationUtils.serializeToString(pending.get(JobParameterAdapter.DEL)))
    };
    final JobParameterVOImpl view = parameterView();
    view.applyFilter(filter);
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshHistory (JobAM)
  /**
   ** Refresh the history belonging to a certain <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to refresh from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshHistory(final String identifier) {
    final JobHistoryVOImpl view = historyView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   commitDetail  (JobAM)
  /**
   ** Committing changes to a <code>Schedule Job</code>.
   **
   ** @param  mode               the mode of transction to perfom.
   **                            <br>
   **                            Allowed object is {@link String}.
   ** @param  bean               the {@link JobAdapter} providing access to the
   **                            changes to apply.
   **                            <br>
   **                            Allowed object is {@link JobAdapter}.
   **
   ** @return                    <code>true</code> id the transaction is
   **                            completed successful.
   **                            <br>
   **                            Possible object is {@link Boolean}.
   */
  @Override
  public Boolean commitDetail(final String mode, final JobAdapter bean) {
    // delegate to the data provider
    if (mode.equals("edit"))
      ((JobDataProvider)detailView().getDataProvider()).update(bean);
    else
      ((JobDataProvider)detailView().getDataProvider()).create(bean);
    return Boolean.TRUE;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   start (JobAM)
  /**
   ** Starts the execution of an existing <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to start.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void start(final String identifier) {
    ((JobDataProvider)detailView().getDataProvider()).start(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   stop (JobAM)
  /**
   ** Stops the execution of an existing <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to stop.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void stop(final String identifier) {
    ((JobDataProvider)detailView().getDataProvider()).stop(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   enable (JobAM)
  /**
   ** Enables an deactivated <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to enable.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void enable(final String identifier) {
    ((JobDataProvider)detailView().getDataProvider()).enable(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   disable (JobAM)
  /**
   ** Disables an activated <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to disable.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void disable(final String identifier) {
    ((JobDataProvider)detailView().getDataProvider()).disable(identifier);
  }
}