/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Administration Management

    File        :   TaskAMImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    TaskAMImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysadmin.module;

import java.util.Map;

import oracle.jbo.Row;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.iam.ui.platform.model.filter.Criterion;

import oracle.iam.ui.platform.utils.SerializationUtils;

import oracle.iam.identity.sysadmin.schema.TaskAdapter;

import oracle.iam.identity.sysadmin.module.common.TaskAM;

import oracle.iam.identity.sysadmin.model.view.JobVOImpl;
import oracle.iam.identity.sysadmin.model.view.TaskVOImpl;
import oracle.iam.identity.sysadmin.model.view.TaskParameterVOImpl;

import oracle.iam.identity.sysadmin.schema.TaskParameterAdapter;

////////////////////////////////////////////////////////////////////////////////
// class TaskAMImpl
// ~~~~~ ~~~~~~~~~~
/**
 ** The local {@link ApplicationModuleImpl} to coordinate certain task
 ** belonging to tasks.
 ** <p>
 ** ---------------------------------------------------------------------
 ** --- File generated by Oracle ADF Business Components Design Time.
 ** --- Mon Mar 06 19:50:30 CET 2017
 ** --- Custom code may be added to this class.
 ** --- Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class TaskAMImpl extends    ApplicationModuleImpl
                        implements TaskAM {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>TaskAMImpl</code> application module that allows use as
   ** a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public TaskAMImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   detailView
  /**
   ** Container's getter for <code>TaskDetailVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>TaskDetail</code>.
   **                            <br>
   **                            Possible object is {@link TaskVOImpl).
   */
  private TaskVOImpl detailView() {
    return (TaskVOImpl)findViewObject("TaskDetailVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   parameterView
  /**
   ** Container's getter for <code>TaskParameterVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>TaskParameter</code>.
   **                            <br>
   **                            Possible object is {@link TaskParameterVOImpl).
   */
  private TaskParameterVOImpl parameterView() {
    return (TaskParameterVOImpl)findViewObject("TaskParameterVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   jobListView
  /**
   ** Container's getter for <code>JobVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>Job</code>.
   **                            <br>
   **                            Possible object is {@link JobVOImpl).
   */
  private JobVOImpl jobListView() {
    return (JobVOImpl)findViewObject("JobListVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (TaskAM)
  /**
   ** Finds a certain <code>Scheduler Task</code> by executing a query against
   ** the persistence layer which leverage the primary key of the entity object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Scheduler Task</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByIdentifier(final String identifier) {
    final TaskVOImpl view = detailView();
    view.applyFilter(new Criterion(TaskAdapter.PK, identifier));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (TaskAM)
  /**
   ** Finds a certain <code>Scheduler Task</code> by executing a query against
   ** the persistence layer which leverage the unique name of the entity object.
   **
   ** @param  name               the unique name of the
   **                            <code>Scheduler Task</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByName(final String name) {
    final TaskVOImpl view = detailView();
    view.applyFilter(new Criterion(TaskAdapter.PK, name));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail (TaskAM)
  /**
   ** Initialize the model to maintain an existing <code>Scheduler Task</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Scheduler Task</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchDetail(final String identifier) {
    fetchByName(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createDetail (JobAM)
  /**
   ** Initialize the model to create a new <code>Schedule Job</code>.
   */
  @Override
  public void createDetail() {
    final TaskVOImpl  detail = detailView();
    final TaskAdapter bean   = new TaskAdapter();
    final Row         row    = detail.createRow();
    // call toRow to initialize, row handles lookups as well.
    bean.toRow(row, true);
    // setting the proper row state to avoid the row is considered as candidate
    // for pending changes in ADF, until user types value by himself.
    row.setNewRowState(Row.STATUS_INITIALIZED);
    detail.insertRow(row);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (TaskAM)
  /**
   ** Refresh the attributes belonging to a certain
   ** <code>Scheduler Task</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Scheduler Task</code> to
   **                            initialize.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshAttribute(final String identifier) {
    final TaskVOImpl view = detailView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshParameter (TaskAM)
  /**
   ** Refresh the <code>Task Parameter</code>s belonging to a certain
   ** <code>Schedule Task</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Task</code> to query.
   **                            <br>
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            added, deleted and modified values.
   **                            <br>
   **                            Allowed object is {@link Map}.
   */
  @Override
  public void refreshParameter(final String identifier, final Map<String, Map<String, Object>> pending) {
    final Criterion[] filter = {
      new Criterion(TaskParameterAdapter.FK_TASK, identifier)
    , new Criterion(TaskParameterAdapter.ADD,     SerializationUtils.serializeToString(pending.get(TaskParameterAdapter.ADD)))
    , new Criterion(TaskParameterAdapter.DEL,     SerializationUtils.serializeToString(pending.get(TaskParameterAdapter.DEL)))
    , new Criterion(TaskParameterAdapter.MOD,     SerializationUtils.serializeToString(pending.get(TaskParameterAdapter.MOD)))
    };
    final TaskParameterVOImpl view = parameterView();
    view.applyFilter(filter);
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshJob (TaskAM)
  /**
   ** Refresh the jobs belonging to a certain <code>Schedule Task</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to refresh from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshJob(final String identifier) {
    final JobVOImpl view = jobListView();
    view.reset();
    view.executeQuery();
  }
}