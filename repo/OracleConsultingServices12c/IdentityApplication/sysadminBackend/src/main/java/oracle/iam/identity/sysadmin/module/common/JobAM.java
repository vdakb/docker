/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Administration Management

    File        :   JobAM.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the interface
                    JobAM.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysadmin.module.common;

import java.util.Map;

import oracle.iam.identity.sysadmin.schema.JobAdapter;

import oracle.jbo.ApplicationModule;

////////////////////////////////////////////////////////////////////////////////
// class JobAM
// ~~~~~ ~~~~~
/**
 ** The <code>Application Module</code> to coordinate the particular task
 ** belonging to jobs.
 ** <p>
 ** ---------------------------------------------------------------------
 ** ---    File generated by Oracle ADF Business Components Design Time.
 ** ---    Mon Mar 20 14:49:55 CET 2017
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public interface JobAM extends ApplicationModule {

  //////////////////////////////////////////////////////////////////////////////
  // Methods grouped by functionality
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier
  /**
   ** Finds a certain <code>Schedule Job</code> by executing a query against the
   ** persistence layer which leverage the primary key of the entity
   ** object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void fetchByIdentifier(final String identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName
  /**
   ** Finds a certain <code>Schedule Job</code> by executing a query against the
   ** persistence layer which leverage the unique name of the entity object.
   **
   ** @param  name               the unique name  of the
   **                            <code>Schedule Job</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void fetchByName(final String name);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail
  /**
   ** Initialize the model to maintain an existing <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void fetchDetail(final String identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createDetail
  /**
   ** Initialize the model to create a new <code>Schedule Job</code>.
   */
  void createDetail();

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute
  /**
   ** Refresh the attributes belonging to a certain <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to refresh from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void refreshAttribute(final String identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshParameter
  /**
   ** Refresh the <code>Job Parameter</code>s belonging to a certain
   ** <code>Schedule Job</code>.
   **
   ** @param  jobName            the system identifier of the
   **                            <code>Schedule Job</code> to query.
   **                            <br>
   **                            Allowed object is {@link String}.
   ** @param  taskName           the system identifier of the
   **                            <code>Schedule Task</code> to query.
   **                            <br>
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            modified values.
   **                            <br>
   **                            Allowed object is {@link Map}.
   */
  void refreshParameter(final String jobName, final String taskName, final Map<String, Map<String, Object>> pending);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshHistory
  /**
   ** Refresh the history belonging to a certain <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to refresh from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void refreshHistory(final String identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   commitDetail
  /**
   ** Committing changes to a <code>Schedule Job</code>.
   **
   ** @param  mode               the mode of transction to perfom.
   **                            <br>
   **                            Allowed object is {@link String}.
   ** @param  bean               the {@link JobAdapter} providing access to the
   **                            changes to apply.
   **                            <br>
   **                            Allowed object is {@link JobAdapter}.
   **
   ** @return                    <code>true</code> id the transaction is
   **                            completed successful.
   **                            <br>
   **                            Possible object is {@link Boolean}.
   */
  Boolean commitDetail(final String mode, final JobAdapter bean);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   start
  /**
   ** Starts the execution of an existing <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to start.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void start(final String identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   stop
  /**
   ** Stops the execution of an existing <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to stop.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void stop(final String identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   enable
  /**
   ** Enables an deactivated <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to enable.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void enable(final String identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   disable
  /**
   ** Disables an activated <code>Schedule Job</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Schedule Job</code> to disable.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void disable(final String identifier);
}