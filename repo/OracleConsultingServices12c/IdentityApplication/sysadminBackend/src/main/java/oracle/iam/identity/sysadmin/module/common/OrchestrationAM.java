/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Administration Management

    File        :   OrchestrationAM.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the interface
                    OrchestrationAM.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysadmin.module.common;

import oracle.jbo.ApplicationModule;

////////////////////////////////////////////////////////////////////////////////
// class OrchestrationAM
// ~~~~~ ~~~~~~~~~~~~~~~
/**
 ** The <code>Application Module</code> to coordinate the particular task
 ** belonging to orchestration processes.
 ** <p>
 ** ---------------------------------------------------------------------
 ** ---    File generated by Oracle ADF Business Components Design Time.
 ** ---    Mon Mar 20 14:49:55 CET 2017
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public interface OrchestrationAM extends ApplicationModule {

  //////////////////////////////////////////////////////////////////////////////
  // Methods grouped by functionality
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier
  /**
   ** Finds a certain <code>Orchestration Process</code> by executing a query
   ** against the persistence layer which leverage the primary key of the entity
   ** object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Orchestration Process</code> to fetch
   **                            from the persistence layer.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  void fetchByIdentifier(final Long identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName
  /**
   ** Finds a certain <code>Orchestration Process</code> by executing a query
   ** against the persistence layer which leverage the unique name of the entity
   ** object.
   **
   ** @param  name               the unique name of the
   **                            <code>Orchestration Process</code> to fetch
   **                            from the persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  void fetchByName(final String name);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail
  /**
   ** Initialize the model to maintain an existing
   ** <code>Orchestration Process</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Orchestration Process</code> to fetch
   **                            from the persistence layer.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  void fetchDetail(final Long identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute
  /**
   ** Refresh the attributes belonging to a certain
   ** <code>Orchestration Process</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Orchestration Process</code> to
   **                            initialize.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  void refreshAttribute(final Long identifier);

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshEvent
  /**
   ** Refresh the <code>Orchestration Event</code>s belonging to a certain
   ** <code>Orchestration Process</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Orchestration Process</code> to refresh
   **                            the <code>Orchestration Event</code>s for.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  void refreshEvent(final Long identifier);
}