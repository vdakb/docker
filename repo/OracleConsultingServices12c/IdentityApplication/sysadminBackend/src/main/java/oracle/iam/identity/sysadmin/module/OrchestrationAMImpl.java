/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Administration Management

    File        :   OrchestrationAMImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    OrchestrationAMImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysadmin.module;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.iam.ui.platform.model.filter.Criterion;

import oracle.iam.identity.sysadmin.model.view.OrchestrationEventVOImpl;
import oracle.iam.identity.sysadmin.model.view.OrchestrationProcessVOImpl;

import oracle.iam.identity.sysadmin.module.common.OrchestrationAM;

import oracle.iam.identity.sysadmin.schema.OrchestrationProcessAdapter;

////////////////////////////////////////////////////////////////////////////////
// class OrchestrationAMImpl
// ~~~~~ ~~~~~~~~~~~~~~~~~~~
/**
 ** The local {@link ApplicationModuleImpl} to coordinate certain task
 ** belonging to orchestration processes.
 ** <p>
 ** ---------------------------------------------------------------------
 ** --- File generated by Oracle ADF Business Components Design Time.
 ** --- Mon Mar 06 19:50:30 CET 2017
 ** --- Custom code may be added to this class.
 ** --- Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class OrchestrationAMImpl extends    ApplicationModuleImpl
                                 implements OrchestrationAM {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>OrchestrationAMImpl</code> application module that
   ** allows use as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public OrchestrationAMImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   detailView
  /**
   ** Container's getter for <code>OrchestrationProcessDetailVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>OrchestrationProcessDetail</code>.
   **                            <br>
   **                            Possible object is
   **                            {@link OrchestrationProcessVOImpl).
   */
  private OrchestrationProcessVOImpl detailView() {
    return (OrchestrationProcessVOImpl)findViewObject("OrchestrationProcessDetailVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   eventView
  /**
   ** Container's getter for <code>OrchestrationEventVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>OrchestrationEventDetail</code>.
   **                            <br>
   **                            Possible object is
   **                            {@link OrchestrationEventVOImpl).
   */
  private OrchestrationEventVOImpl eventView() {
    return (OrchestrationEventVOImpl)findViewObject("OrchestrationEventVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (OrchestrationAM)
  /**
   ** Finds a certain <code>Orchestration Process</code> by executing a query
   ** against the persistence layer which leverage the primary key of the entity
   ** object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Orchestration Process</code> to fetch
   **                            from the persistence layer.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void fetchByIdentifier(final Long identifier) {
    final OrchestrationProcessVOImpl view = detailView();
    view.applyFilter(new Criterion(OrchestrationProcessAdapter.PK, identifier));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (OrchestrationAM)
  /**
   ** Finds a certain <code>Orchestration Process</code> by executing a query
   ** against the persistence layer which leverage the unique name of the entity
   ** object.
   **
   ** @param  name               the unique name of the
   **                            <code>Orchestration Process</code> to fetch
   **                            from the persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByName(final String name) {
    final OrchestrationProcessVOImpl view = detailView();
    view.applyFilter(new Criterion(OrchestrationProcessAdapter.NAME, name));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail (OrchestrationAM)
  /**
   ** Initialize the model to maintain an existing
   ** <code>Orchestration Process</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Orchestration Process</code> to fetch
   **                            from the persistence layer.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void fetchDetail(final Long identifier) {
    fetchByIdentifier(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (OrchestrationAM)
  /**
   ** Refresh the attributes belonging to a certain
   ** <code>Orchestration Process</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Orchestration Process</code> to
   **                            initialize.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void refreshAttribute(final Long identifier) {
    final OrchestrationProcessVOImpl view = detailView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshEvent (OrchestrationAM)
  /**
   ** Refresh the <code>Orchestration Event</code>s belonging to a certain
   ** <code>Orchestration Process</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Orchestration Process</code> to refresh
   **                            the <code>Orchestration Event</code>s for.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void refreshEvent(final Long identifier) {
    final OrchestrationEventVOImpl view = eventView();
    view.reset();
    view.executeQuery();
  }
}