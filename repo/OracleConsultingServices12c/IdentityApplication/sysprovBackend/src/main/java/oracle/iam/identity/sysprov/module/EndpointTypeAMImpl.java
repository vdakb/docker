/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Provisioning Management

    File        :   EndpointTypeAMImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    EndpointTypeAMImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysprov.module;

import java.util.Map;

import oracle.jbo.Row;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.iam.ui.platform.model.filter.Criterion;

import oracle.iam.ui.platform.utils.SerializationUtils;

import oracle.iam.identity.sysprov.module.common.EndpointTypeAM;

import oracle.iam.identity.sysprov.model.view.EndpointVOImpl;
import oracle.iam.identity.sysprov.model.view.EndpointTypeVOImpl;
import oracle.iam.identity.sysprov.model.view.EndpointTypeParameterVOImpl;

import oracle.iam.identity.sysprov.schema.EndpointAdapter;
import oracle.iam.identity.sysprov.schema.EndpointTypeAdapter;
import oracle.iam.identity.sysprov.schema.EndpointTypeParameterAdapter;

////////////////////////////////////////////////////////////////////////////////
// class EndpointTypeAMImpl
// ~~~~~ ~~~~~~~~~~~~~~~~~~
/**
 ** The local {@link ApplicationModuleImpl} to coordinate certain task
 ** belonging to <code>IT Resource Type</code>s.
 ** <p>
 ** ---------------------------------------------------------------------
 ** --- File generated by Oracle ADF Business Components Design Time.
 ** --- Mon Mar 06 19:50:30 CET 2017
 ** --- Custom code may be added to this class.
 ** --- Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 **
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class EndpointTypeAMImpl extends    ApplicationModuleImpl
                                implements EndpointTypeAM {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>EndpointTypeAMImpl</code> application module that
   ** allows use as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public EndpointTypeAMImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   detailView
  /**
   ** Container's getter for <code>EndpointTypeDetailVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>EndpointTypeDetail</code>.
   **                            <br>
   **                            Possible object is {@link EndpointTypeVOImpl}.
   */
  private EndpointTypeVOImpl detailView() {
    return (EndpointTypeVOImpl)findViewObject("EndpointTypeDetailVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   parameterView
  /**
   ** Container's getter for <code>EndpointTypeParameterVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>EndpointTypeParameter</code>.
   **                            <br>
   **                            Possible object is
   **                            {@link EndpointTypeParameterVOImpl}.
   */
  private EndpointTypeParameterVOImpl parameterView() {
    return (EndpointTypeParameterVOImpl)findViewObject("EndpointTypeParameterVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   endpointView
  /**
   ** Container's getter for <code>EndpointVO</code>.
   **
   ** @return                    the implementation of view object
   **                            <code>Endpoint</code>.
   **                            <br>
   **                            Possible object is {@link EndpointVOImpl}.
   */
  private EndpointVOImpl endpointView() {
    return (EndpointVOImpl)findViewObject("EndpointListVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (EndpointTypeAM)
  /**
   ** Finds a certain <code>IT Resource Type</code> by executing a query against
   ** the persistence layer which leverage the primary key of the entity object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>IT Resource Type</code> to fetch from
   **                            the persistence layer.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void fetchByIdentifier(final Long identifier) {
    final EndpointTypeVOImpl view = detailView();
    view.applyFilter(new Criterion(EndpointTypeAdapter.PK, identifier));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (EndpointTypeAM)
  /**
   ** Finds a certain <code>IT Resource Type</code> by executing a query
   ** against the persistence layer which leverage the unique key of the entity
   ** object.
   **
   ** @param  name               the unique identifier of the
   **                            <code>IT Resource Type</code> to fetch from
   **                            the persistence layer.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void fetchByName(final String name) {
    final EndpointTypeVOImpl view = detailView();
    view.applyFilter(new Criterion(EndpointTypeAdapter.NAME, name));
    view.executeQuery();

    // position the cursor on the first row
    view.first();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createDetail (EndpointTypeAM)
  /**
   ** Initialize the model to create a new <code>IT Resource Type</code>.
   */
  @Override
  public void createDetail() {
    final EndpointTypeVOImpl  detail = detailView();
    final Row                 row    = detail.createRow();
    // call toRow to initialize, row handles lookups as well.
    EndpointTypeAdapter.build().toRow(row, true);
    // initialize the primary key of the IT Resource to create with the proper
    // value to ensure the iterators and dependend entities find the correct
    // binding value to initialize themself
    row.setAttribute(EndpointTypeAdapter.PK,       Long.valueOf(-1L));
    row.setAttribute(EndpointTypeAdapter.MULTIPLE, Boolean.TRUE);
    // setting the proper row state to avoid the row is considered as candidate
    // for pending changes in ADF, until user types value by himself.
    row.setNewRowState(Row.STATUS_INITIALIZED);
    detail.insertRow(row);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail (EndpointTypeAM)
  /**
   ** Initialize the model to create a new <code>IT Resource Type</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>IT Resource Type</code> to fetch from the
   **                            persistence layer.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void fetchDetail(final Long identifier) {
    fetchByIdentifier(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (EndpointTypeAM)
  /**
   ** Refresh the attributes belonging to a certain
   ** <code>IT Resource Type</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>IT Resource Type</code> to initialize.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void refreshAttribute(final Long identifier) {
    final EndpointTypeVOImpl view = detailView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   requeryParameter (EndpointTypeAM)
  /**
   ** Refresh the <code>Parameter</code>s belonging to a certain
   ** <code>IT Resource Type</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>IT Resource Type</code> to query.
   **                            <br>
   **                            Allowed object is {@link Long}.
   ** @param  pending            the collection of pending changes belonging to
   **                            added, deleted and modified values.
   **                            <br>
   **                            Allowed object is {@link Map}.
   */
  @Override
  public void requeryParameter(final Long identifier, final Map<String, Map<String, Object>> pending) {
    final Criterion[] filter = {
      new Criterion(EndpointTypeParameterAdapter.PK,  identifier)
    , new Criterion(EndpointTypeParameterAdapter.ADD, SerializationUtils.serializeToString(pending.get(EndpointTypeParameterAdapter.ADD)))
    , new Criterion(EndpointTypeParameterAdapter.DEL, SerializationUtils.serializeToString(pending.get(EndpointTypeParameterAdapter.DEL)))
    , new Criterion(EndpointTypeParameterAdapter.MOD, SerializationUtils.serializeToString(pending.get(EndpointTypeParameterAdapter.MOD)))
    };
    final EndpointTypeParameterVOImpl view = parameterView();
    view.applyFilter(filter);
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshEndpoint (EndpointTypeAM)
  /**
   ** Refresh the jobs belonging to a certain <code>IT Resource Type</code>.
   **
   ** @param  identifier         the unique identifier of the
   **                            <code>IT Resource Type</code> to refresh from
   **                            the persistence layer.
   **                            <br>
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshEndpoint(final String identifier) {
    final Criterion[] filter = {
      new Criterion(EndpointAdapter.TYPE, identifier)
    };
    final EndpointVOImpl view = endpointView();
    view.applyFilter(filter);
    view.executeQuery();
  }
}