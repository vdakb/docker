/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Provisioning Management

    File        :   ReconciliationEventAMClient.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    ReconciliationEventAMClient.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysprov.module.client;

import oracle.jbo.client.remote.ApplicationModuleImpl;

import oracle.iam.identity.sysprov.module.common.ReconciliationEventAM;

////////////////////////////////////////////////////////////////////////////////
// class ReconciliationEventAMClient
// ~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
 ** The remote {@link ApplicationModuleImpl} to coordinate certain task
 ** belonging to <code>Reconciliation Event</code>s.
 ** <p>
 ** ---------------------------------------------------------------------
 ** ---    File generated by Oracle ADF Business Components Design Time.
 ** ---    Mon Mar 06 19:50:30 CET 2017
 ** ---    Custom code may be added to this class.
 ** ---    Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 **
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class ReconciliationEventAMClient extends    ApplicationModuleImpl
                                         implements ReconciliationEventAM {

  //////////////////////////////////////////////////////////////////////////////
  // static final attributes
  //////////////////////////////////////////////////////////////////////////////

  // the official serial version ID which says cryptically which version we're
  // compatible with
  @SuppressWarnings("compatibility:9104165860200327184")
  private static final long serialVersionUID = 6515248234246897288L;

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>ReconciliationEventAMClient</code> application module
   ** that allows use as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public ReconciliationEventAMClient() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (ReconciliationEventAM)
  /**
   ** Finds a certain <code>Reconciliation Event</code> by executing a query
   ** against the persistence layer which leverage the primary key of the entity
   ** object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Reconciliation Event</code> to fetch from
   **                            the persistence layer.
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void fetchByIdentifier(final Long identifier) {
    this.riInvokeExportedMethod(this, "fetchByIdentifier", new String[]{"java.lang.Long"}, new Object[] {identifier});
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (ReconciliationEventAM)
  /**
   ** Finds a certain <code>Reconciliation Event</code> by executing a query
   ** against the persistence layer which leverage the status of the event.
   **
   ** @param  status             the status value of the
   **                            <code>Reconciliation Event</code> to fetch from
   **                            the persistence layer.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByStatus(final String status) {
    this.riInvokeExportedMethod(this, "fetchByStatus", new String[]{"java.lang.String"}, new Object[] {status});
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail (ReconciliationEventAM)
  /**
   ** Initialize the model to create a new <code>Reconciliation Event</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Reconciliation Event</code> to fetch from
   **                            the persistence layer.
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void fetchDetail(final Long identifier) {
    this.riInvokeExportedMethod(this, "fetchDetail", new String [] {"java.lang.Long"}, new Object[] {identifier});
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (ReconciliationEventAM)
  /**
   ** Refresh the attributes belonging to a certain
   ** <code>Reconciliation Event</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Reconciliation Event</code> to initialize.
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void refreshAttribute(final Long identifier) {
    riInvokeExportedMethod(this, "refreshAttribute", new String [] {"java.lang.Long"}, new Object[] {identifier});
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   closeEvent (ReconciliationEventAM)
  /**
   ** Close the <code>Reconciliation Event</code> with the given
   ** identifier.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Reconciliation Event</code> to
   **                            reevaluate.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void closeEvent(final Long identifier) {
    riInvokeExportedMethod(this, "closeEvent", new String [] {"java.lang.Long"}, new Object[] {identifier});
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   reevaluateEvent (ReconciliationEventAM)
  /**
   ** Re-Evaluates the <code>Reconciliation Event</code> with the given
   ** identifier.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Reconciliation Event</code> to
   **                            reevaluate.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void reevaluateEvent(final Long identifier) {
    riInvokeExportedMethod(this, "reevaluateEvent", new String [] {"java.lang.Long"}, new Object[] {identifier});
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   linkEvent (ReconciliationEventAM)
  /**
   ** Link the <code>Reconciliation Event</code> with the given
   ** identifier to the specififed identity.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Reconciliation Event</code> to link.
   **                            <br>
   **                            Allowed object is {@link Long}.
   ** @param  identity           the system identifier of the
   **                            <code>Identity</code> to link.
   **                            <br>
   **                            Allowed object is {@link Long}.
   */
  @Override
  public void linkEvent(final Long identifier, final Long identity) {
    riInvokeExportedMethod(this, "linkEvent", new String [] {"java.lang.Long","java.lang.Long"}, new Object[] {identifier, identity});
  }
}