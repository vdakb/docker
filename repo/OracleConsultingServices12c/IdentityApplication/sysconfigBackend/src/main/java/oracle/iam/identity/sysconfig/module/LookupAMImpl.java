/*
    Oracle Deutschland GmbH

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2017. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Frontend Extension
    Subsystem   :   System Configuration Management

    File        :   LookupAMImpl.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    LookupAMImpl.


    Revisions   Date        Editor      Comment
    -----------+-----------+-----------+-----------------------------------
    2.0.0.0     2017-03-06  DSteding    First release version
*/

package oracle.iam.identity.sysconfig.module;

import java.util.Map;
import java.util.List;

import oracle.jbo.Row;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.iam.ui.platform.model.filter.Criterion;

import oracle.iam.ui.platform.utils.SerializationUtils;

import oracle.iam.identity.sysconfig.module.common.LookupAM;

import oracle.iam.identity.sysconfig.model.view.LookupVOImpl;
import oracle.iam.identity.sysconfig.model.view.LookupValueVOImpl;

import oracle.iam.identity.sysconfig.schema.LookupAdapter;
import oracle.iam.identity.sysconfig.schema.LookupValueAdapter;
import oracle.iam.identity.sysconfig.schema.LookupDataProvider;

////////////////////////////////////////////////////////////////////////////////
// class LookupAMImpl
// ~~~~~ ~~~~~~~~~~~~
/**
 ** The local {@link ApplicationModuleImpl} to coordinate certain task belonging
 ** to <code>Lookup Definitions</code> and <code>Lookup Value</code>s.
 ** <p>
 ** ---------------------------------------------------------------------
 ** --- File generated by Oracle ADF Business Components Design Time.
 ** --- Mon Mar 06 19:50:30 CET 2017
 ** --- Custom code may be added to this class.
 ** --- Warning: Do not modify method signatures of generated methods.
 ** ---------------------------------------------------------------------
 ** @author  dieter.steding@oracle.com
 ** @version 2.0.0.0
 ** @since   2.0.0.0
 */
public class LookupAMImpl extends    ApplicationModuleImpl
                          implements LookupAM {

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs a <code>LookupAMImpl</code> application module that allows use
   ** as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public LookupAMImpl() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Accessor methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   detailView
  /**
   ** Container's getter for {@link LookupVOImpl}.
   **
   ** @return                    the implementation of view object
   **                            <code>LookupVO</code>.
   */
  private LookupVOImpl detailView() {
    return (LookupVOImpl)findViewObject("LookupDetailVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   valueView
  /**
   ** Container's getter for {@link LookupValueVOImpl}.
   **
   ** @return                    the implementation of view object
   **                            <code>LookupValueVO</code>.
   */
  private LookupValueVOImpl valueView() {
    return (LookupValueVOImpl)findViewObject("LookupValueVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   pickerView
  /**
   ** Container's getter for {@link LookupValueVOImpl}.
   **
   ** @return                    the implementation of view object
   **                            <code>LookupValueVO</code>.
   */
  private LookupValueVOImpl pickerView() {
    return (LookupValueVOImpl)findViewObject("LookupPickerVO");
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByIdentifier (LookupAM)
  /**
   ** Finds a certain <code>Lookup Definition</code> by executing a query
   ** against the persistence layer which leverage the primary key of the entity
   ** object.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Lookup Definition</code> to fetch from
   **                            the persistence layer.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByIdentifier(final String identifier) {
    final LookupVOImpl view = detailView();
    view.applyFilter(new Criterion(LookupAdapter.PK, identifier));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchByName (LookupAM)
  /**
   ** Finds a certain <code>Lookup Definition</code> by executing a query
   ** against the persistence layer which leverage the unique key of the entity
   ** object.
   **
   ** @param  name               the unique identifier of the
   **                            <code>Lookup Definition</code> to fetch from
   **                            the persistence layer.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchByName(final String name) {
    final LookupVOImpl view = detailView();
    view.applyFilter(new Criterion(LookupAdapter.NAME, name));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchDetail (LookupAM)
  /**
   ** Initialize the model to maintain an existing
   ** <code>Lookup Definition</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Lookup Definition</code> to fetch from
   **                            the persistence layer.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchDetail(final String identifier) {
    fetchByIdentifier(identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createDetail (LookupAM)
  /**
   ** Initialize the model to create a new <code>Lookup Definition</code>.
   */
  @Override
  public void createDetail() {
    final LookupVOImpl  detail = detailView();
    final LookupAdapter bean   = new LookupAdapter();
    final Row           row    = detail.createRow();
    // call toRow to initialize, row handles lookups as well.
    bean.toRow(row, true);
    // initialize the primary key of the lookup to create with the proper value
    // to ensure the the iterators and dependend entities find the correct
    // binding value to initialize themself
    row.setAttribute(LookupAdapter.PK,       "-1");
    row.setAttribute(LookupAdapter.TYPE,     LookupAdapter.TYPE_LOOKUP);
    row.setAttribute(LookupAdapter.REQUIRED, LookupAdapter.REQUIRED_FALSE);
    // setting the proper row state to avoid the row is considered as candidate
    // for pending changes in ADF, until user types value by himself.
    row.setNewRowState(Row.STATUS_INITIALIZED);
    detail.insertRow(row);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createDetail (LookupAM)
  /**
   ** Creates a new <code>Lookup Definition</code>.
   **
   ** @param  mab                the {@link LookupAdapter} model adapter bean,
   **                            with fields set to create.
   ** @param  value              the {@link List} of {@link LookupValueAdapter}
   **                            model adapter beans, with fields set to be
   **                            added to the <code>Lookup Definition</code>
   **                            after its created.
   */
  @Override
  public void createDetail(final LookupAdapter mab, final List<LookupValueAdapter> value) {
    final LookupVOImpl       detail   = detailView();
    final LookupDataProvider provider = (LookupDataProvider)detail.getDataProvider();
    provider.create(mab);
    provider.addValue(mab.getName(), value);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   modifyDetail (LookupAM)
  /**
   ** Modifies an existing <code>Lookup Definition</code>.
   **
   ** @param  mab                the {@link LookupAdapter} model adapter bean,
   **                            with fields set to create.
   ** @param  added              the {@link List} of {@link LookupValueAdapter}
   **                            model adapter beans, with fields set to be
   **                            added to the <code>Lookup Definition</code>
   **                            after its modified.
   ** @param  modified           the {@link List} of {@link LookupValueAdapter}
   **                            model adapter beans, with fields set to be
   **                            modified to the <code>Lookup Definition</code>
   **                            after its modified.
   ** @param  deleted            the {@link List} of {@link LookupValueAdapter}
   **                            model adapter beans, with fields set to be
   **                            deleted to the <code>Lookup Definition</code>
   **                            after its modified.
   */
  @Override
  public void modifyDetail(final LookupAdapter mab, final List<LookupValueAdapter> added, final List<LookupValueAdapter> modified, final List<LookupValueAdapter> deleted) {
    final LookupVOImpl       detail   = detailView();
    final LookupDataProvider provider = (LookupDataProvider)detail.getDataProvider();
    provider.update(mab);
    provider.removeValue(mab.getName(), deleted);
    provider.addValue(mab.getName(),    added);
    provider.modifyValue(mab.getName(), modified);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   fetchPicker (LookupAM)
  /**
   ** Initialize the model to fetch values from a
   ** <code>Lookup Definition</code>.
   **
   ** @param  name               the unique identifier of the
   **                            <code>Lookup Definition</code> the values needs
   **                            to be fetched from the persistence layer.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void fetchPicker(final String name) {
    final LookupValueVOImpl view = pickerView();
    view.applyFilter(new Criterion(LookupValueAdapter.NAME, name));
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshAttribute (LookupAM)
  /**
   ** Refresh the <code>Lookup Value</code>s belonging to a certain
   ** <code>Lookup Definition</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Lookup Definition</code> to refresh.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshAttribute(final String identifier) {
    final LookupVOImpl view = detailView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   refreshValue (LookupAM)
  /**
   ** Refresh the <code>Lookup Value</code>s belonging to a certain
   ** <code>Lookup Definition</code> and will be provisioned by the
   ** <code>Lookup Definition</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Lookup Definition</code> to refresh.
   **                            Allowed object is {@link String}.
   */
  @Override
  public void refreshValue(final String identifier) {
    final LookupValueVOImpl view = valueView();
    view.reset();
    view.executeQuery();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   createValue (LookupAM)
  /**
   ** Initialize the <code>Lookup Value</code>s belonging to a certain
   ** <code>Lookup Definition</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Lookup Definition</code> to initialize.
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            added, deleted and modified values.
   */
  @Override
  public void createValue(final String identifier, final Map<String, Map<String, Object>> pending) {
    final Map<String, Object> added = pending.get(LookupValueAdapter.ADD);
    final LookupValueVOImpl   view  = valueView();
    final Row                 row   = view.createRow();
    row.setAttribute(LookupValueAdapter.LOOKUP_KEY, identifier);
    row.setAttribute(LookupValueAdapter.VALUE_KEY,  String.valueOf((added.size() + 1) * -1));
    row.setAttribute(LookupValueAdapter.DISABLED,   LookupValueAdapter.DISABLED_FASLE);
    row.setAttribute("pendingAction",   LookupValueAdapter.ADD);
    view.insertRowAtRangeIndex(0, row);
    final LookupValueAdapter value = new LookupValueAdapter(row);
    added.put(value.getValueKey(), value);
    requeryValue(identifier, pending);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   requeryValue (LookupAM)
  /**
   ** Initialize the <code>Lookup Value</code>s belonging to a certain
   ** <code>Lookup Definition</code>.
   **
   ** @param  identifier         the system identifier of the
   **                            <code>Lookup Definition</code> to query.
   **                            Allowed object is {@link String}.
   ** @param  pending            the collection of pending changes belonging to
   **                            added, deleted and modified values.
   */
  @Override
  public void requeryValue(final String identifier, final Map<String, Map<String, Object>> pending) {
    final Criterion[] filter = {
      new Criterion(LookupValueAdapter.ADD, SerializationUtils.serializeToString(pending.get(LookupValueAdapter.ADD)))
    , new Criterion(LookupValueAdapter.DEL, SerializationUtils.serializeToString(pending.get(LookupValueAdapter.DEL)))
    , new Criterion(LookupValueAdapter.MOD, SerializationUtils.serializeToString(pending.get(LookupValueAdapter.MOD)))
    };
    final LookupValueVOImpl view = valueView();
    view.applyFilter(filter);
    view.executeQuery();
  }
}