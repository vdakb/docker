/*
    Oracle Deutschland BV & Co. KG

    This software is the confidential and proprietary information of
    Oracle Corporation. ("Confidential Information").  You shall not
    disclose such Confidential Information and shall use it only in
    accordance with the terms of the license agreement you entered
    into with Oracle.

    ORACLE MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
    SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT. ORACLE SHALL NOT BE LIABLE FOR ANY DAMAGES
    SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
    THIS SOFTWARE OR ITS DERIVATIVES.

    Copyright Â© 2021. All Rights reserved

    -----------------------------------------------------------------------

    System      :   Oracle Identity Manager Connector Library
    Subsystem   :   Red Hat Keycloak Connector

    File        :   Total.java

    Compiler    :   Oracle JDeveloper 12c

    Author      :   dieter.steding@oracle.com

    Purpose     :   This file implements the class
                    Total.


    Revisions    Date        Editor      Comment
    ------------+-----------+-----------+-----------------------------------
    1.0.0.0      2021-28-06  DSteding    First release version
*/

package oracle.iam.identity.icf.connector.keycloak.schema;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;

import oracle.iam.identity.icf.schema.Resource;

////////////////////////////////////////////////////////////////////////////////
// final class Total
// ~~~~~ ~~~~~ ~~~~~~
/**
 ** The REST entity representation used in count operations.
 ** <p>
 ** Meanwhile I start to hate Keycloak. The API isn't only inconsistent; its
 ** crap.
 ** <br>
 ** Each endpoint implements its own behavior that requires speciel treatments
 ** to get a proper result. As an example <code>/users</code> and
 ** <code>/roles</code> returning on a <code>count</code> endpoint a simple
 ** numeric value as a result (obviously the developers are to lazy to form a
 ** proper JSON-Object). Nevertheless <code>/groups</code> returning on a
 ** <code>count</code> endpoint a JSON-Object <code>{"count" : n}</code>. So we
 ** have to implement this specific object only for that purpose.
 ** <p>
 ** Lord throw brains out of heaven.
 **
 ** @author  dieter.steding@oracle.com
 ** @version 1.0.0.0
 ** @since   1.0.0.0
 */
public class Total extends    Number
                   implements Resource<Total> {

  //////////////////////////////////////////////////////////////////////////////
  // static final attributes
  //////////////////////////////////////////////////////////////////////////////

  // the official serial version ID which says cryptically which version we're
  // compatible with
  @SuppressWarnings("compatibility:-7879268303274307072")
  private static final long serialVersionUID = -8975017322222081921L;

  //////////////////////////////////////////////////////////////////////////////
  // instance attributes
  //////////////////////////////////////////////////////////////////////////////

  /**
   ** The system identifier of the resource generated by the Service Provider
   ** at time of creation.
   */
  @JsonProperty
  private Long count;

  //////////////////////////////////////////////////////////////////////////////
  // Constructors
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   Ctor
  /**
   ** Constructs an empty <code>Total</code> REST representation that allows use
   ** as a JavaBean.
   ** <br>
   ** Zero argument constructor required by the framework.
   ** <br>
   ** Default Constructor
   */
  public Total() {
    // ensure inheritance
    super();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of implemented interfaces
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   hashCode (Resource)
  /**
   ** Returns a hash code value for the object.
   ** <br>
   ** This method is supported for the benefit of hash tables such as those
   ** provided by {@link java.util.HashMap}.
   ** <p>
   ** The general contract of <code>hashCode</code> is:
   ** <ul>
   **   <li>Whenever it is invoked on the same object more than once during an
   **       execution of a Java application, the <code>hashCode</code> method
   **       must consistently return the same integer, provided no information
   **       used in <code>equals</code> comparisons on the object is modified.
   **       This integer need not remain consistent from one execution of an
   **       application to another execution of the same application.
   **   <li>If two objects are equal according to the
   **       <code>equals(Object)</code> method, then calling the
   **       <code>hashCode</code> method on each of the two objects must
   **       produce the same integer result.
   **   <li>It is <em>not</em> required that if two objects are unequal
   **       according to the {@link java.lang.Object#equals(java.lang.Object)}
   **       method, then calling the <code>hashCode</code> method on each of the
   **       two objects must produce distinct integer results. However, the
   **       programmer should be aware that producing distinct integer results
   **       for unequal objects may improve the performance of hash tables.
   ** </ul>
   **
   ** @return                    a hash code value for this object.
   **                            <br>
   **                            Possible object is <code>int</code>.
   */
  @Override
  public int hashCode() {
    return Objects.hash(this.count);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   toString (Resource)
  /**
   ** Returns the string representation for this instance in its minimal form.
   **
   ** @return                    the string representation for this instance in
   **                            its minimal form.
   **                            <br>
   **                            Possible object is {@link String}.
   */
  @Override
  public final String toString() {
    return this.count == null ? "0" : this.count.toString();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods of abstract base classes
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   intValue (Number)
  /**
   ** Returns the value as an <code>int</code>, which may involve rounding or
   ** truncation.
   **
   ** @return                    the numeric value represented by this object
   **                            after conversion to type <code>int</code>.
   **                            <br>
   **                            Possible object is <code>int</code>.
   */
  public final int intValue() {
    return this.count.intValue();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   longValue (Number)
  /**
   ** Returns the value as a <code>long</code>, which may involve rounding or
   ** truncation.
   **
   ** @return                    the numeric value represented by this object
   **                            after conversion to type <code>long</code>.
   **                            <br>
   **                            Possible object is <code>long</code>.
   */
  public final long longValue() {
    return this.count;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   floatValue (Number)
  /**
   ** Returns the value as a <code>float</code>, which may involve rounding.
   **
   ** @return                    the numeric value represented by this object
   **                            after conversion to type <code>float</code>.
   **                            <br>
   **                            Possible object is <code>float</code>.
   */
  public final float floatValue() {
    return this.count;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Method:   doubleValue (Number)
  /**
   ** Returns the value as a <code>double</code>, which may involve rounding.
   **
   ** @return                    the numeric value represented by this object
   **                            after conversion to type <code>double</code>.
   **                            <br>
   **                            Possible object is <code>double</code>.
   */
  public final double doubleValue() {
    return this.count;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Methods grouped by functionality
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Method:   equals (overridden)
  /**
   ** Indicates whether some other object is "equal to" this one according to
   ** the contract specified in {@link Object#equals(Object)}.
   ** <p>
   ** Two <code>Total</code>s are considered equal if and only if they represent
   ** the same properties. As a consequence, two given <code>Total</code>s may
   ** be different even though they contain the same set of names with the same
   ** values, but in a different order.
   **
   ** @param  other              the reference object with which to compare.
   **                            <br>
   **                            Allowed object is {@link Object}.
   **
   ** @return                    <code>true</code> if this object is the same as
   **                            the object argument; <code>false</code>
   **                            otherwise.
   **                            <br>
   **                            Possible object is <code>boolean</code>.
   */
  @Override
  public boolean equals(final Object other) {
    if (this == other)
      return true;

    if (other == null || getClass() != other.getClass())
      return false;

    final Total that = (Total)other;
    return Objects.equals(this.count, that.count);
  }
}