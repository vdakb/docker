<?xml version="1.0" encoding="US-ASCII"?>
<project name           ="Identity Connector Workspace Targets"
         basedir        ="."
         xmlns:fmw      ="http://oracle.hst.deployment/fusion"
         xmlns:jps      ="http://oracle.hst.deployment/security"
         xmlns:server   ="http://oracle.hst.deployment/topology"
         xmlns:plugin   ="http://oracle.iam.identity/plugin"
         xmlns:metadata ="http://oracle.iam.identity/metadata"
         xmlns:object   ="http://oracle.iam.identity/object"
         xmlns:operation="http://oracle.iam.identity/operation"
         xmlns:job      ="http://oracle.iam.identity/job"
         xmlns:sandbox  ="http://oracle.iam.identity/sandbox"
         xmlns:workflow ="http://oracle.iam.identity/workflow">
  <!--
  =====================================================================
  == properties globaly defined
  =====================================================================
  -->
  <import file="./icf-context.xml"/>
  <!--
  =====================================================================
  == ANT macro to build a integration library
  =====================================================================
  -->
  <macrodef name="assemble-library">
    <attribute name="library"/>
    <attribute name="include" default="**/*.class **/*.xml **/*.xsd"/>
    <attribute name="exclude" default="**/*-ant.xml **/*-dm.xml **/*.properties"/>
    <attribute name="destination"/>
    <sequential>
      <jar destfile="${deploy.dir}/@{library}.jar" manifest="${manifest}">
        <fileset dir="${output.dir}" includes="@{include}" excludes="@{exclude}"/>
      </jar>
      <if>
        <!--
         | if a expression cannot be expanded by ant due to it isn't defined
         ] Ant set the value to the expresssion it self hence compare to that
         | expression means undefined
         -->
        <equals arg1="@{destination}" arg2="$${destination.base}" trim="true"/>
        <then>
          <echo message="Nothing to copy from path ${deploy.dir} due to $${destination.base} is undefined"/>
        </then>
        <else>
          <echo message="Copying java archive from path ${deploy.dir} to @{destination}"/>
          <for param="task" list="@{destination}">
            <sequential>
              <copy todir="@{task}/lib" overwrite="true" preservelastmodified="false" verbose="no">
                <fileset dir="${deploy.dir}">
                  <include  name="@{library}.jar"/>
                </fileset>
              </copy>
            </sequential>
          </for>
        </else>
      </if>
    </sequential>
  </macrodef>
  <!--
  =====================================================================
  == ANT macro to build a integration library
  =====================================================================
  -->
  <macrodef name="assemble-integration">
    <attribute name="library"/>
    <attribute name="include" default="**/*.class **/*.xml **/*.xsd"/>
    <attribute name="exclude" default="**/*-ant.xml **/*-dm.xml **/*.properties"/>
    <attribute name="destination"/>
    <sequential>
      <jar destfile="${deploy.dir}/@{library}-${application.release}.jar" manifest="${manifest}">
        <fileset dir="${output.dir}" includes="@{include}" excludes="@{exclude}"/>
      </jar>
      <if>
        <!--
         | if a expression cannot be expanded by ant due to it isn't defined
         ] Ant set the value to the expresssion it self hence compare to that
         | expression means undefined
         -->
        <equals arg1="@{destination}" arg2="$${destination.base}" trim="true"/>
        <then>
          <echo message="Nothing to copy from path ${deploy.dir} due to $${destination.base} is undefined"/>
        </then>
        <else>
          <echo message="Copying java archive from path ${deploy.dir} to @{destination}"/>
          <for param="task" list="@{destination}">
            <sequential>
              <copy todir="@{task}/lib" overwrite="true" preservelastmodified="false" verbose="no">
                <fileset dir="${deploy.dir}">
                  <include  name="@{library}-${application.release}.jar"/>
                </fileset>
              </copy>
            </sequential>
          </for>
        </else>
      </if>
    </sequential>
  </macrodef>
  <!--
  =====================================================================
  == ANT macro to build a connector bundle
  =====================================================================
  -->
  <macrodef name="assemble-bundle">
    <attribute name="bundle"/>
    <attribute name="include" default="**/*.class **/*.xml **/*.xsd"/>
    <attribute name="exclude" default="**/*-ant.xml **/*-dm.xml"/>
    <attribute name="destination"/>
    <sequential>
      <mkdir dir="${output.dir}/lib"/>
      <copy todir="${output.dir}/lib" flatten="true">
        <path refid="oracle.ocs.icf.runtime"/>
      </copy>
      <war compress="false" destfile="${deploy.dir}/@{bundle}-${application.release}.jar" manifest="${output.dir}/META-INF/bundle-manifest.mf" needxmlfile="false">
        <zipfileset dir="${output.dir}" includes="@{include}" excludes="@{exclude}"/>
        <zipfileset prefix="lib" dir="${output.dir}/lib" includes="*.jar"/>
        <fileset dir="${source.dir}" includes="META-INF/**/*.txt META-INF/**/*.xml META-INF/**/*.xsd META-INF/**/*.json"/>
      </war>
      <delete dir="${output.dir}/lib"/>
      <if>
        <!--
         | if a expression cannot be expanded by ant due to it isn't defined
         ] Ant set the value to the expresssion it self hence compare to that
         | expression means undefined
         -->
        <equals arg1="@{destination}" arg2="$${destination.bundle}" trim="true"/>
        <then>
          <echo message="Nothing to copy from path ${deploy.dir} due to $${destination.bundle} is undefined"/>
        </then>
        <else>
          <echo message="Copying bundle archive from path ${deploy.dir} to @{destination}"/>
          <for param="task" list="@{destination}">
            <sequential>
              <copy todir="@{task}" overwrite="true" preservelastmodified="false" verbose="no">
                <fileset dir="${deploy.dir}">
                  <include name="@{bundle}-${application.release}.jar"/>
                </fileset>
              </copy>
            </sequential>
          </for>
        </else>
      </if>
    </sequential>
  </macrodef>
  <!--
  =====================================================================
  == ANT macro to copy deployment descriptors
  =====================================================================
  -->
  <macrodef name="descriptor-copy">
    <attribute name="source"/>
    <attribute name="target"/>
    <attribute name="pattern"/>
    <sequential>
      <copy todir="${basedir}/@{target}" overwrite="true" flatten="true" preservelastmodified="false" verbose="yes">
        <fileset dir="${basedir}/@{source}">
          <patternset refid="@{pattern}"/>
        </fileset>
      </copy>
    </sequential>
  </macrodef>
  <!--
  =====================================================================
  == ANT target to cleanup the build deliverables
  =====================================================================
  -->
  <target name="clean" description="Clean the project build deliverables">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${output.dir}" includes="**/*"/>
      <fileset dir="${deploy.dir}" includes="**/*"/>
      <fileset dir="${deploy.doc}">
        <patternset refid="document.patterns"/>
      </fileset>
    </delete>
  </target>
  <!--
  =====================================================================
  == ANT target to initialize the build process by creating all
  == necessary filesystem folders
  =====================================================================
  -->
  <target name="init">
    <tstamp/>
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${output.dir}/META-INF"/>
  </target>
  <!--
  =====================================================================
  == ANT target to copy secific files to the output directory
  =====================================================================
  -->
  <target name="copy" description="Copy files to output directory" depends="init">
    <patternset id="copy.patterns">
      <include name="${source.dir}/META-INF/**/*"/>
    </patternset>
    <copy todir="${output.dir}" overwrite="true" preservelastmodified="false" verbose="no">
      <fileset dir="${source.dir}">
        <patternset refid="filetype.patterns"/>
      </fileset>
      <!--
      <fileset dir="${groovy.dir}">
        <include name="**/*.groovy"/>
      </fileset>
      -->
    </copy>
  </target>
  <!--
  =====================================================================
  == ANT target to compile all Java Source files
  =====================================================================
  -->
  <target name="compile" description="Compile Java source files" depends="copy">
    <!--
    due to a regression of Bug 43114 - package-info.java repeatedly compiled
    we had to enforce to compile any existing package-info.java in the source
    tree
    -->
    <touch>
      <fileset dir="${source.dir}" includes="**/package-info.java"/>
    </touch>
    <!-- Compile Groovy source files if the source path exists -->
    <condition property="groovy-exists">
      <available file="${groovy.dir}" type="dir"/>
    </condition>
    <if>
      <equals arg1="${groovy-exists}" arg2="true"/>
      <then>
        <echo message="Compiling groovy"/>
        <groovyc failonerror="false" srcdir="${groovy.dir}" destdir="${output.dir}" includes="**/*.groovy" classpathref="classpath"/>
      </then>
    </if>
    <javac executable       ="${jdk.compiler}"
           source           ="${jdk.version}"
           target           ="${jdk.version}"
           debug            ="${javac.debug}"
           nowarn           ="${javac.nowarn}"
           destdir          ="${output.dir}"
           encoding         ="${javac.encoding}"
           deprecation      ="${javac.deprecation}"
           classpathref     ="classpath"
           includeantruntime="no">
      <src path        ="${source.dir}"/>
    </javac>
  </target>
  <!--
  =====================================================================
  == ANT target to create a manifest used in the jar files
  =====================================================================
  -->
  <target name="manifest" description="Create a manifest used in the jar files">
    <delete file="${manifest}"/>
    <echo message="Reverting build version properties"/>
    <exec executable="${svn.executable}">
      <arg value="revert"/>
      <arg value="${application.version}"/>
    </exec>
    <!-- update to version properties -->
    <propertyfile file="${application.version}" comment="Build version info">
      <entry key="build.timest" type="date" value="now" pattern="dd/MM/yyyy hh:mm:ss aa"/>
      <entry key="build.major"  type="int"  value="00"  pattern="00" default="00"/>
      <entry key="build.minor"  type="int"  value="01"  pattern="00" default="00" operation="+" />
    </propertyfile>

    <!-- load the file -->
    <property file="${application.version}"/>

    <!-- create the manifest file -->
    <manifest file="${manifest}">
      <attribute name="Built-By"               value="${user.name}"/>
      <attribute name="Built-At"               value="${build.timest}"/>
      <attribute name="Specification-Title"    value="${description}"/>
      <attribute name="Specification-Version"  value="${application.release}"/>
      <attribute name="Specification-Vendor"   value="Oracle Consulting Services"/>
      <attribute name="Implementation-Title"   value="${description}"/>
      <attribute name="Implementation-Version" value="${application.release}-${build.major}.${build.minor}"/>
      <attribute name="Implementation-Vendor"  value="Oracle Consulting Services"/>
    </manifest>
  </target>
  <!--
  =====================================================================
  == ANT target to create a manifest used in the jar files
  =====================================================================
  -->
  <target name="bundle-manifest" description="Create a bundle manifest used in the jar files" depends="manifest">
    <!-- create the manifest file -->
    <manifest file="${output.dir}/META-INF/bundle-manifest.mf">
      <attribute name="Built-By"                         value="${user.name}"/>
      <attribute name="Built-At"                         value="${build.timest}"/>
      <attribute name="Specification-Title"              value="${description}"/>
      <attribute name="Specification-Version"            value="${application.release}"/>
      <attribute name="Specification-Vendor"             value="Oracle Consulting Services"/>
      <attribute name="Implementation-Title"             value="${description}"/>
      <attribute name="Implementation-Version"           value="${application.release}-${build.major}.${build.minor}"/>
      <attribute name="Implementation-Vendor"            value="Oracle Consulting Services"/>
      <attribute name="ConnectorBundle-FrameworkVersion" value="1.2"/>
      <attribute name="ConnectorBundle-Name"             value="${bundle}"/>
      <attribute name="ConnectorBundle-Version"          value="${application.release}"/>
    </manifest>
  </target>
  <!--
  =====================================================================
  == ANT target to assemble the Connector Bundle
  =====================================================================
  -->
  <target name="make-bundle" description="Build the connector bundle" if="bundle" depends="compile,bundle-manifest">
    <echo message="Assemble connector bundle archive from path ${output.dir}/${packagepath.bundle}"/>
    <assemble-bundle bundle="${bundle}" include="${packagepath.bundle}" exclude="${packagepath.library} ${packagepath.adapter} ${packagepath.scheduler} ${packagepath.diagnostic} **/*-ant.xml **/*-dm.xml" destination="${destination.bundle}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to assemble the integration library
  =====================================================================
  -->
  <target name="make-library" description="Build the OIM library" if="library" depends="compile,manifest">
    <echo message="Assemble java archive from path ${output.dir}/${packagepath.library}"/>
    <assemble-library library="${library}" include="${packagepath.library} **/*.xsd **/*.wsdl **/*.txt" destination="${destination.base}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to assemble the adapter library
  =====================================================================
  -->
  <target name="make-adapter" description="Build the adapter library" if="adapter" depends="compile,manifest">
    <echo message="Assemble java archive from path ${output.dir}/${packagepath.adapter}"/>
    <assemble-integration library="${adapter}" include="${packagepath.adapter} **/*.txt" destination="${destination.base}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to assemble the scheduler library
  =====================================================================
  -->
  <target name="make-scheduler" description="Build the scheduler library" if="scheduler" depends="compile,manifest">
    <echo message="Assemble java archive from path ${output.dir}/${packagepath.scheduler}"/>
    <assemble-integration library="${scheduler}" include="${packagepath.scheduler} **/*.txt" destination="${destination.base}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to assemble the thirdparty library
  =====================================================================
  -->
  <target name="make-thirdparty" description="Build the thirdparty library" if="thirdparty" depends="compile,manifest">
    <echo message="Assemble java archive excluding path ${output.dir}/${packagepath.adapter} and ${output.dir}/${packagepath.scheduler}"/>
    <assemble-integration library="${thirdparty}" include="**/*.class **/*.index **/*.xsd **/*.xml **/*.txt" exclude="${packagepath.bundle} ${packagepath.adapter} ${packagepath.scheduler} ${packagepath.diagnostic} **/*-ant.xml **/*-dm.xml" destination="${destination.base}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to assemble the connector library
  =====================================================================
  -->
  <target name="make-connector" description="Build the connector library" if="connector" depends="compile,manifest">
    <echo message="Assemble java archive from path ${output.dir}/**/*class **/*.xsd"/>
    <assemble-integration library="${connector}" include="**/*.class **/*.xsd **/*.xml **/*.txt" destination="${destination.base}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to assemble the diagnostic library
  =====================================================================
  -->
  <target name="make-diagnostic" description="Build the diagnostic library" if="diagnostic" depends="compile,manifest">
    <echo message="Assemble java archive from path ${output.dir}/${packagepath.diagnostic}"/>
    <assemble-integration library="${diagnostic}" include="${packagepath.diagnostic} **/*.txt" destination="${destination.base}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to assemble the non-binary deliverables like source and
  == javadoc files
  =====================================================================
  -->
  <target name="make" description="Assemble the project source and documentation" depends="make-library,make-thirdparty,make-adapter,make-scheduler,make-connector,make-diagnostic,make-bundle,configuration">
    <!-- generate javadoc -->
    <javadoc author      ="false"
             classpathref="classpath"
             sourcepath  ="${source.dir}"
             packagenames="oracle.*"
             destdir     ="${deploy.doc}"
             encoding    ="${javac.encoding}"
             docencoding ="${javac.encoding}"
             charset     ="${javac.encoding}"/>
    <!-- assemble javadoc -->
    <jar destfile="${deploy.dir}/${application}-doc.jar">
      <fileset dir="${deploy.doc}">
        <patternset refid="document.patterns"/>
      </fileset>
    </jar>
    <!-- assemble source -->
    <jar destfile="${deploy.dir}/${application}-src.jar">
      <fileset dir="${source.dir}" includes="**/*.*"/>
    </jar>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the base system configuration files
  =====================================================================
  -->
  <target name="configuration-base" description="Deploy the base configuration" if="configuration.base">
    <descriptor-copy source="${resource.dir}/xml/base" target="${destination.base}/xml" pattern="descriptor.pattern.base"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the target system configuration files
  =====================================================================
  -->
  <target name="configuration-target" description="Deploy the process deployment configuration" if="configuration.target">
    <descriptor-copy source="${resource.dir}/xml/target" target="${destination.target}/xml" pattern="descriptor.pattern.target"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the trusted system configuration files
  =====================================================================
  -->
  <target name="configuration-trusted" description="Deploy the trusted source configuration" if="configuration.trusted">
    <descriptor-copy source="${resource.dir}/xml/trusted" target="${destination.trusted}/xml" pattern="descriptor.pattern.trusted"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the plugin system configuration files
  =====================================================================
  -->
  <target name="configuration-plugin" description="Deploy the plugin configuration" if="configuration.plugin">
    <descriptor-copy source="${project.dir}/xml/plugin" target="${destination.plugin}/xml" pattern="descriptor.pattern.plugin"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the metadata system configuration files
  =====================================================================
  -->
  <target name="configuration-metadata" description="Deploy the metadata configuration" if="configuration.metadata">
    <descriptor-copy source="${project.dir}/metadata" target="${destination.metadata}/metadata" pattern="descriptor.pattern.metadata"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the deployment configuration files
  =====================================================================
  -->
  <target name="configuration" description="Deploy the deployment configuration" depends="configuration-base,configuration-trusted,configuration-target,configuration-plugin,configuration-metadata"/>
  <!--
  =====================================================================
  == ANT target to deploy the connector bundle archive
  =====================================================================
  -->
  <target name="deploy-bundle" description="Deploy the connector bundle" if="bundle" depends="make">
    <plugin:upload contextRef="oim-context" verbose="true">
      <plugin:library location="${oim.remote.bundle}" file="${deploy.dir}/${bundle}-${application.release}.jar"/>
    </plugin:upload>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the library archive
  =====================================================================
  -->
  <target name="deploy-library" description="Deploy the thirdparty library" if="library" depends="make">
    <library-deploy dir="${deploy.dir}" file="${library}.jar" location="${oim.remote.thirdparty}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the adapter archive
  =====================================================================
  -->
  <target name="deploy-adapter" description="Deploy the adapter library" if="adapter" depends="make">
    <library-deploy dir="${deploy.dir}" file="${adapter}-${application.release}.jar" location="${oim.remote.adapter}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the scheduler archive
  =====================================================================
  -->
  <target name="deploy-scheduler" description="Deploy the scheduler library" if="scheduler" depends="make">
    <library-deploy dir="${deploy.dir}" file="${scheduler}-${application.release}.jar" location="${oim.remote.scheduler}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the thirdparty archive
  =====================================================================
  -->
  <target name="deploy-thirdparty" description="Deploy the thirdparty library" if="thirdparty" depends="make">
    <library-deploy dir="${deploy.dir}" file="${thirdparty}-${application.release}.jar" location="${oim.remote.thirdparty}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the connector archive
  =====================================================================
  -->
  <target name="deploy-connector" description="Deploy the connector library" if="connector" depends="make">
    <library-deploy dir="${deploy.dir}" file="${connector}-${application.release}.jar" location="${oim.remote.adapter}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the diagnostic archive
  =====================================================================
  -->
  <target name="deploy-diagnostic" description="Deploy the diagnostic library" if="diagnostic" depends="make">
    <library-deploy dir="${deploy.dir}" file="${diagnostic}-${application.release}.jar" location="${oim.remote.diagnostic}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the plugin archive
  =====================================================================
  -->
  <target name="deploy-plugin" description="Deploy the plugin archive" if="plugin" depends="make">
    <plugin-deploy dir="${deploy.dir}" file="${plugin}.zip" location="${oim.remote.plugin}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the resource bundles
  =====================================================================
  -->
  <target name="deploy-resources" description="Deploy the project resource bundles on the server" if="resource">
    <copy todir="${wks.base}/${destination.target}/resources" overwrite="true" preservelastmodified="false" verbose="no">
      <fileset dir="${project.dir}/resources" includes="*.properties"/>
    </copy>
    <bundle-deploy dir="${project.dir}/resources" location="${oim.remote.connector}"/>
  </target>
  <!--
  =====================================================================
  == ANT target to deploy the project artifacts
  =====================================================================
  -->
  <target name="deploy" description="Deploy the project artifacts" depends="clean,make,deploy-library,deploy-thirdparty,deploy-connector,deploy-adapter,deploy-plugin,deploy-scheduler,deploy-diagnostic,deploy-bundle,deploy-resources"/>
  <!--
  =====================================================================
  == ANT target to build and the project artifacts from scratch
  =====================================================================
  -->
  <target name="all" description="Build,Deploy and Install the project on the target host" depends="deploy"/>
</project>
